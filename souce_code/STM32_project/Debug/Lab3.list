
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002844  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002974  08002974  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002974  08002974  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002974  08002974  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800297c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000001c  08002998  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002998  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f53  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016941  00000000  00000000  0002bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb1  00000000  00000000  00042561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823c0  00000000  00000000  0004d112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf4d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000288c  00000000  00000000  000cf528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002938 	.word	0x08002938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002938 	.word	0x08002938

0800014c <initialButton>:

int KeyReg[NUM_OF_BUTTON][3]; // Mảng lưu trạng thái của 3 nút, mỗi nút có 3 trạng thái
int ButtonFlag[NUM_OF_BUTTON] = {0, 0, 0}; // Cờ trạng thái cho 3 nút
int buttonPressDuration = 0; //Biến kiểm tra nhấn giữ

void initialButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	//KHỞI TẠO CỜ VÀ TRẠNG THÁI CÁC NÚT
	for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e01a      	b.n	800018e <initialButton+0x42>
	        ButtonFlag[i] = 0;
 8000158:	4a11      	ldr	r2, [pc, #68]	; (80001a0 <initialButton+0x54>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        for (int j = 0; j < 3; j++) {
 8000162:	2300      	movs	r3, #0
 8000164:	603b      	str	r3, [r7, #0]
 8000166:	e00c      	b.n	8000182 <initialButton+0x36>
	            KeyReg[i][j] = NORMAL_STATE;
 8000168:	490e      	ldr	r1, [pc, #56]	; (80001a4 <initialButton+0x58>)
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	4613      	mov	r3, r2
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	4413      	add	r3, r2
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	4413      	add	r3, r2
 8000176:	2201      	movs	r2, #1
 8000178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int j = 0; j < 3; j++) {
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	603b      	str	r3, [r7, #0]
 8000182:	683b      	ldr	r3, [r7, #0]
 8000184:	2b02      	cmp	r3, #2
 8000186:	ddef      	ble.n	8000168 <initialButton+0x1c>
	for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	3301      	adds	r3, #1
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b02      	cmp	r3, #2
 8000192:	dde1      	ble.n	8000158 <initialButton+0xc>
	        }
	    }
}
 8000194:	bf00      	nop
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000038 	.word	0x20000038
 80001a4:	20000074 	.word	0x20000074

080001a8 <isSelectPressed>:

//KIỂM TRA NÚT Select NẾU ĐƯỢC NHẤN
int isSelectPressed() {
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
    if (ButtonFlag[Select] == 1) {
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <isSelectPressed+0x20>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d104      	bne.n	80001be <isSelectPressed+0x16>
        ButtonFlag[Select] = 0;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <isSelectPressed+0x20>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
        return 1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	e000      	b.n	80001c0 <isSelectPressed+0x18>
    }
    return 0;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000038 	.word	0x20000038

080001cc <isDurationPressed>:

//KIỂM TRA NÚT Duration NẾU ĐƯỢC NHẤN
int isDurationPressed() {
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
    if (ButtonFlag[Duration] == 1) {
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <isDurationPressed+0x20>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d104      	bne.n	80001e2 <isDurationPressed+0x16>
        ButtonFlag[Duration] = 0;
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <isDurationPressed+0x20>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
        return 1;
 80001de:	2301      	movs	r3, #1
 80001e0:	e000      	b.n	80001e4 <isDurationPressed+0x18>
    }
    return 0;
 80001e2:	2300      	movs	r3, #0
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	20000038 	.word	0x20000038

080001f0 <isSetPressed>:

//KIỂM TRA NÚT Set NẾU ĐƯỢC NHẤN
int isSetPressed() {
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
    if (ButtonFlag[Set] == 1) {
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <isSetPressed+0x20>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d104      	bne.n	8000206 <isSetPressed+0x16>
        ButtonFlag[Set] = 0;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <isSetPressed+0x20>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
        return 1;
 8000202:	2301      	movs	r3, #1
 8000204:	e000      	b.n	8000208 <isSetPressed+0x18>
    }
    return 0;
 8000206:	2300      	movs	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000038 	.word	0x20000038

08000214 <getKeyInput>:

//ĐỌC TRẠNG THÁI NÚT VÀ XỬ LÝ DEBOUNCE
void getKeyInput() {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTON; i++) {
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e0d9      	b.n	80003d4 <getKeyInput+0x1c0>
        KeyReg[i][0] = KeyReg[i][1]; // Di chuyển trạng thái cũ
 8000220:	4971      	ldr	r1, [pc, #452]	; (80003e8 <getKeyInput+0x1d4>)
 8000222:	687a      	ldr	r2, [r7, #4]
 8000224:	4613      	mov	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	4413      	add	r3, r2
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	3304      	adds	r3, #4
 8000230:	6819      	ldr	r1, [r3, #0]
 8000232:	486d      	ldr	r0, [pc, #436]	; (80003e8 <getKeyInput+0x1d4>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	4413      	add	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4403      	add	r3, r0
 8000240:	6019      	str	r1, [r3, #0]
        KeyReg[i][1] = KeyReg[i][2]; // Di chuyển trạng thái hiện tại
 8000242:	4969      	ldr	r1, [pc, #420]	; (80003e8 <getKeyInput+0x1d4>)
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4613      	mov	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	4413      	add	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	440b      	add	r3, r1
 8000250:	3308      	adds	r3, #8
 8000252:	6819      	ldr	r1, [r3, #0]
 8000254:	4864      	ldr	r0, [pc, #400]	; (80003e8 <getKeyInput+0x1d4>)
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	4613      	mov	r3, r2
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	4413      	add	r3, r2
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	4403      	add	r3, r0
 8000262:	3304      	adds	r3, #4
 8000264:	6019      	str	r1, [r3, #0]

        // Đọc tín hiệu của các nút (thay thế với hàm đọc GPIO thực tế)
        if (i == Select) KeyReg[i][2] = HAL_GPIO_ReadPin(Select_GPIO_Port, Select_Pin);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d10f      	bne.n	800028c <getKeyInput+0x78>
 800026c:	2110      	movs	r1, #16
 800026e:	485f      	ldr	r0, [pc, #380]	; (80003ec <getKeyInput+0x1d8>)
 8000270:	f001 fb36 	bl	80018e0 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	4618      	mov	r0, r3
 8000278:	495b      	ldr	r1, [pc, #364]	; (80003e8 <getKeyInput+0x1d4>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4613      	mov	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4413      	add	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	440b      	add	r3, r1
 8000286:	3308      	adds	r3, #8
 8000288:	6018      	str	r0, [r3, #0]
 800028a:	e024      	b.n	80002d6 <getKeyInput+0xc2>
        else if (i == Duration) KeyReg[i][2] = HAL_GPIO_ReadPin(Duration_GPIO_Port, Duration_Pin);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d10f      	bne.n	80002b2 <getKeyInput+0x9e>
 8000292:	2120      	movs	r1, #32
 8000294:	4855      	ldr	r0, [pc, #340]	; (80003ec <getKeyInput+0x1d8>)
 8000296:	f001 fb23 	bl	80018e0 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	4952      	ldr	r1, [pc, #328]	; (80003e8 <getKeyInput+0x1d4>)
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4613      	mov	r3, r2
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	4413      	add	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	440b      	add	r3, r1
 80002ac:	3308      	adds	r3, #8
 80002ae:	6018      	str	r0, [r3, #0]
 80002b0:	e011      	b.n	80002d6 <getKeyInput+0xc2>
        else if (i == Set) KeyReg[i][2] = HAL_GPIO_ReadPin(Set_GPIO_Port, Set_Pin);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d10e      	bne.n	80002d6 <getKeyInput+0xc2>
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	484c      	ldr	r0, [pc, #304]	; (80003ec <getKeyInput+0x1d8>)
 80002bc:	f001 fb10 	bl	80018e0 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4618      	mov	r0, r3
 80002c4:	4948      	ldr	r1, [pc, #288]	; (80003e8 <getKeyInput+0x1d4>)
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	4613      	mov	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	4413      	add	r3, r2
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	440b      	add	r3, r1
 80002d2:	3308      	adds	r3, #8
 80002d4:	6018      	str	r0, [r3, #0]

        // Kiểm tra nếu trạng thái của nút ổn định
        if ((KeyReg[i][0] == KeyReg[i][1]) && (KeyReg[i][1] == KeyReg[i][2])) {
 80002d6:	4944      	ldr	r1, [pc, #272]	; (80003e8 <getKeyInput+0x1d4>)
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4613      	mov	r3, r2
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	4413      	add	r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	440b      	add	r3, r1
 80002e4:	6819      	ldr	r1, [r3, #0]
 80002e6:	4840      	ldr	r0, [pc, #256]	; (80003e8 <getKeyInput+0x1d4>)
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4613      	mov	r3, r2
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4403      	add	r3, r0
 80002f4:	3304      	adds	r3, #4
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d168      	bne.n	80003ce <getKeyInput+0x1ba>
 80002fc:	493a      	ldr	r1, [pc, #232]	; (80003e8 <getKeyInput+0x1d4>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4613      	mov	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	4413      	add	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	440b      	add	r3, r1
 800030a:	3304      	adds	r3, #4
 800030c:	6819      	ldr	r1, [r3, #0]
 800030e:	4836      	ldr	r0, [pc, #216]	; (80003e8 <getKeyInput+0x1d4>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4613      	mov	r3, r2
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	4413      	add	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4403      	add	r3, r0
 800031c:	3308      	adds	r3, #8
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4299      	cmp	r1, r3
 8000322:	d154      	bne.n	80003ce <getKeyInput+0x1ba>
            if (KeyReg[i][2] != KeyReg[i][0]) { // Kiểm tra nhấn thả
 8000324:	4930      	ldr	r1, [pc, #192]	; (80003e8 <getKeyInput+0x1d4>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4613      	mov	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	4413      	add	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	440b      	add	r3, r1
 8000332:	3308      	adds	r3, #8
 8000334:	6819      	ldr	r1, [r3, #0]
 8000336:	482c      	ldr	r0, [pc, #176]	; (80003e8 <getKeyInput+0x1d4>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4403      	add	r3, r0
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4299      	cmp	r1, r3
 8000348:	d024      	beq.n	8000394 <getKeyInput+0x180>
                KeyReg[i][0] = KeyReg[i][2]; // Cập nhật trạng thái cũ
 800034a:	4927      	ldr	r1, [pc, #156]	; (80003e8 <getKeyInput+0x1d4>)
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	4613      	mov	r3, r2
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	4413      	add	r3, r2
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	440b      	add	r3, r1
 8000358:	3308      	adds	r3, #8
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	4822      	ldr	r0, [pc, #136]	; (80003e8 <getKeyInput+0x1d4>)
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4403      	add	r3, r0
 800036a:	6019      	str	r1, [r3, #0]

                if (KeyReg[i][2] == PRESSED_STATE) {
 800036c:	491e      	ldr	r1, [pc, #120]	; (80003e8 <getKeyInput+0x1d4>)
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4613      	mov	r3, r2
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	4413      	add	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	440b      	add	r3, r1
 800037a:	3308      	adds	r3, #8
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d125      	bne.n	80003ce <getKeyInput+0x1ba>
                    ButtonFlag[i] = 1; // Đánh dấu nút được nhấn
 8000382:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <getKeyInput+0x1dc>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2101      	movs	r1, #1
 8000388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    buttonPressDuration = 0; // Reset thời gian nhấn giữ khi nhấn lần đầu
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <getKeyInput+0x1e0>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e01c      	b.n	80003ce <getKeyInput+0x1ba>
                }
            }
            else { // Nếu nút không thay đổi (nhấn giữ)
            	if (KeyReg[i][2] == PRESSED_STATE) {
 8000394:	4914      	ldr	r1, [pc, #80]	; (80003e8 <getKeyInput+0x1d4>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	3308      	adds	r3, #8
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d111      	bne.n	80003ce <getKeyInput+0x1ba>
            		buttonPressDuration++; // Tăng thời gian nhấn giữ
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <getKeyInput+0x1e0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <getKeyInput+0x1e0>)
 80003b2:	6013      	str	r3, [r2, #0]

            		if (buttonPressDuration >= LONG_PRESS) { // Kiểm tra nếu thời gian nhấn giữ đã đạt LONG_PRESS
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getKeyInput+0x1e0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2bc7      	cmp	r3, #199	; 0xc7
 80003ba:	dd08      	ble.n	80003ce <getKeyInput+0x1ba>
            			// Xử lý nhấn giữ
            			KeyReg[i][0] = NORMAL_STATE; // Đặt lại trạng thái nút khi nhấn giữ hết thời gian
 80003bc:	490a      	ldr	r1, [pc, #40]	; (80003e8 <getKeyInput+0x1d4>)
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4613      	mov	r3, r2
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	4413      	add	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_OF_BUTTON; i++) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	f77f af22 	ble.w	8000220 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000074 	.word	0x20000074
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	20000038 	.word	0x20000038
 80003f4:	20000044 	.word	0x20000044

080003f8 <fsm_processing>:
int greenTime = 3;
int timeRedTemp;
int timeGreenTemp;
int timeAmberTemp;

void fsm_processing(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	//Tăng Mode khi nút Mode được nhấn
	switch(MODE){
 80003fc:	4b91      	ldr	r3, [pc, #580]	; (8000644 <fsm_processing+0x24c>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b04      	cmp	r3, #4
 8000402:	f200 8255 	bhi.w	80008b0 <fsm_processing+0x4b8>
 8000406:	a201      	add	r2, pc, #4	; (adr r2, 800040c <fsm_processing+0x14>)
 8000408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040c:	08000421 	.word	0x08000421
 8000410:	08000495 	.word	0x08000495
 8000414:	08000681 	.word	0x08000681
 8000418:	08000741 	.word	0x08000741
 800041c:	08000801 	.word	0x08000801
	case STATE_INIT:
		if (timer3_flag == 1)
 8000420:	4b89      	ldr	r3, [pc, #548]	; (8000648 <fsm_processing+0x250>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d104      	bne.n	8000432 <fsm_processing+0x3a>
		{
			//Đọc trạng thái nút và xử lý debounce
			getKeyInput();
 8000428:	f7ff fef4 	bl	8000214 <getKeyInput>
			setTimer3(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f000 fe4f 	bl	80010d0 <setTimer3>
		}
		//Khi nhấn nút thì chuyển sang Mode 1
		if (isSelectPressed() == 1)
 8000432:	f7ff feb9 	bl	80001a8 <isSelectPressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b01      	cmp	r3, #1
 800043a:	d106      	bne.n	800044a <fsm_processing+0x52>
		{
			MODE = MODE1;
 800043c:	4b81      	ldr	r3, [pc, #516]	; (8000644 <fsm_processing+0x24c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
			Index = 0;
 8000442:	4b82      	ldr	r3, [pc, #520]	; (800064c <fsm_processing+0x254>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
			break;
 8000448:	e23d      	b.n	80008c6 <fsm_processing+0x4ce>
		}
		//Hiển thị số 8 trên 4 led 7 đoạn
		valueSEG12 = 88;
 800044a:	4b81      	ldr	r3, [pc, #516]	; (8000650 <fsm_processing+0x258>)
 800044c:	2258      	movs	r2, #88	; 0x58
 800044e:	601a      	str	r2, [r3, #0]
		valueSEG34 = 88;
 8000450:	4b80      	ldr	r3, [pc, #512]	; (8000654 <fsm_processing+0x25c>)
 8000452:	2258      	movs	r2, #88	; 0x58
 8000454:	601a      	str	r2, [r3, #0]

		//Hiển thị tất cả led
		if (timer1_flag == 1)
 8000456:	4b80      	ldr	r3, [pc, #512]	; (8000658 <fsm_processing+0x260>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	f040 822a 	bne.w	80008b4 <fsm_processing+0x4bc>
		{
			if (Index > 3) Index = 0;
 8000460:	4b7a      	ldr	r3, [pc, #488]	; (800064c <fsm_processing+0x254>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b03      	cmp	r3, #3
 8000466:	dd02      	ble.n	800046e <fsm_processing+0x76>
 8000468:	4b78      	ldr	r3, [pc, #480]	; (800064c <fsm_processing+0x254>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 800046e:	4b77      	ldr	r3, [pc, #476]	; (800064c <fsm_processing+0x254>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	4975      	ldr	r1, [pc, #468]	; (800064c <fsm_processing+0x254>)
 8000476:	600a      	str	r2, [r1, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fc05 	bl	8000c88 <update7SEG>
			setTimer1(500);
 800047e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000482:	f000 fded 	bl	8001060 <setTimer1>
			blink_red();
 8000486:	f000 fca5 	bl	8000dd4 <blink_red>
			blink_amber();
 800048a:	f000 fcb1 	bl	8000df0 <blink_amber>
			blink_green();
 800048e:	f000 fcbd 	bl	8000e0c <blink_green>
		}
		break;
 8000492:	e20f      	b.n	80008b4 <fsm_processing+0x4bc>

	case MODE1:
		if (timer3_flag == 1)
 8000494:	4b6c      	ldr	r3, [pc, #432]	; (8000648 <fsm_processing+0x250>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d104      	bne.n	80004a6 <fsm_processing+0xae>
		{
			//Đọc trạng thái nút và xử lý debounce
			getKeyInput();
 800049c:	f7ff feba 	bl	8000214 <getKeyInput>
			setTimer3(10);
 80004a0:	200a      	movs	r0, #10
 80004a2:	f000 fe15 	bl	80010d0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 2
		if (isSelectPressed() == 1)
 80004a6:	f7ff fe7f 	bl	80001a8 <isSelectPressed>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d110      	bne.n	80004d2 <fsm_processing+0xda>
		{
			MODE = MODE2;
 80004b0:	4b64      	ldr	r3, [pc, #400]	; (8000644 <fsm_processing+0x24c>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	701a      	strb	r2, [r3, #0]
			timeRedTemp = redTime;
 80004b6:	4b69      	ldr	r3, [pc, #420]	; (800065c <fsm_processing+0x264>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a69      	ldr	r2, [pc, #420]	; (8000660 <fsm_processing+0x268>)
 80004bc:	6013      	str	r3, [r2, #0]
			led_off(RED0);
 80004be:	2008      	movs	r0, #8
 80004c0:	f000 fc76 	bl	8000db0 <led_off>
			led_off(RED1);
 80004c4:	2040      	movs	r0, #64	; 0x40
 80004c6:	f000 fc73 	bl	8000db0 <led_off>
			Index = 0;
 80004ca:	4b60      	ldr	r3, [pc, #384]	; (800064c <fsm_processing+0x254>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
			break;
 80004d0:	e1f9      	b.n	80008c6 <fsm_processing+0x4ce>
		}
		if(timer2_flag == 1){ //Led giao thông và cập nhật led 7 đoạn
 80004d2:	4b64      	ldr	r3, [pc, #400]	; (8000664 <fsm_processing+0x26c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	f040 809a 	bne.w	8000610 <fsm_processing+0x218>

			//Led trên dưới
			if(count1 == 0){
 80004dc:	4b62      	ldr	r3, [pc, #392]	; (8000668 <fsm_processing+0x270>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d13d      	bne.n	8000560 <fsm_processing+0x168>
				if(status1 == 0){//Led đỏ
 80004e4:	4b61      	ldr	r3, [pc, #388]	; (800066c <fsm_processing+0x274>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d110      	bne.n	800050e <fsm_processing+0x116>
					led_on(RED0);
 80004ec:	2008      	movs	r0, #8
 80004ee:	f000 fc4d 	bl	8000d8c <led_on>
					led_off(AMBER0);
 80004f2:	2004      	movs	r0, #4
 80004f4:	f000 fc5c 	bl	8000db0 <led_off>
					led_off(GREEN0);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fc59 	bl	8000db0 <led_off>
					status1 = 2;
 80004fe:	4b5b      	ldr	r3, [pc, #364]	; (800066c <fsm_processing+0x274>)
 8000500:	2202      	movs	r2, #2
 8000502:	601a      	str	r2, [r3, #0]
					count1 = redTime;
 8000504:	4b55      	ldr	r3, [pc, #340]	; (800065c <fsm_processing+0x264>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a57      	ldr	r2, [pc, #348]	; (8000668 <fsm_processing+0x270>)
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	e028      	b.n	8000560 <fsm_processing+0x168>
				}
				else if(status1 == 1){//Led vàng
 800050e:	4b57      	ldr	r3, [pc, #348]	; (800066c <fsm_processing+0x274>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d110      	bne.n	8000538 <fsm_processing+0x140>
					led_off(RED0);
 8000516:	2008      	movs	r0, #8
 8000518:	f000 fc4a 	bl	8000db0 <led_off>
					led_on(AMBER0);
 800051c:	2004      	movs	r0, #4
 800051e:	f000 fc35 	bl	8000d8c <led_on>
					led_off(GREEN0);
 8000522:	2002      	movs	r0, #2
 8000524:	f000 fc44 	bl	8000db0 <led_off>
					status1 = 0;
 8000528:	4b50      	ldr	r3, [pc, #320]	; (800066c <fsm_processing+0x274>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
					count1 = amberTime;
 800052e:	4b50      	ldr	r3, [pc, #320]	; (8000670 <fsm_processing+0x278>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a4d      	ldr	r2, [pc, #308]	; (8000668 <fsm_processing+0x270>)
 8000534:	6013      	str	r3, [r2, #0]
 8000536:	e013      	b.n	8000560 <fsm_processing+0x168>
				}
				else if(status1 == 2){//Led xanh
 8000538:	4b4c      	ldr	r3, [pc, #304]	; (800066c <fsm_processing+0x274>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d10f      	bne.n	8000560 <fsm_processing+0x168>
					led_off(RED0);
 8000540:	2008      	movs	r0, #8
 8000542:	f000 fc35 	bl	8000db0 <led_off>
					led_off(AMBER0);
 8000546:	2004      	movs	r0, #4
 8000548:	f000 fc32 	bl	8000db0 <led_off>
					led_on(GREEN0);
 800054c:	2002      	movs	r0, #2
 800054e:	f000 fc1d 	bl	8000d8c <led_on>
					status1 = 1;
 8000552:	4b46      	ldr	r3, [pc, #280]	; (800066c <fsm_processing+0x274>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
					count1 = greenTime;
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <fsm_processing+0x27c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a42      	ldr	r2, [pc, #264]	; (8000668 <fsm_processing+0x270>)
 800055e:	6013      	str	r3, [r2, #0]
				}
			}

			//Led trái phải
			if(count2 == 0){
 8000560:	4b45      	ldr	r3, [pc, #276]	; (8000678 <fsm_processing+0x280>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d13d      	bne.n	80005e4 <fsm_processing+0x1ec>
				if(status2 == 0){//Led đỏ
 8000568:	4b44      	ldr	r3, [pc, #272]	; (800067c <fsm_processing+0x284>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d110      	bne.n	8000592 <fsm_processing+0x19a>
					led_on(RED1);
 8000570:	2040      	movs	r0, #64	; 0x40
 8000572:	f000 fc0b 	bl	8000d8c <led_on>
					led_off(AMBER1);
 8000576:	2020      	movs	r0, #32
 8000578:	f000 fc1a 	bl	8000db0 <led_off>
					led_off(GREEN1);
 800057c:	2010      	movs	r0, #16
 800057e:	f000 fc17 	bl	8000db0 <led_off>
					status2 = 2;
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <fsm_processing+0x284>)
 8000584:	2202      	movs	r2, #2
 8000586:	601a      	str	r2, [r3, #0]
					count2 = redTime;
 8000588:	4b34      	ldr	r3, [pc, #208]	; (800065c <fsm_processing+0x264>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a3a      	ldr	r2, [pc, #232]	; (8000678 <fsm_processing+0x280>)
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e028      	b.n	80005e4 <fsm_processing+0x1ec>
				}
				else if(status2 == 1){//Led vàng
 8000592:	4b3a      	ldr	r3, [pc, #232]	; (800067c <fsm_processing+0x284>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d110      	bne.n	80005bc <fsm_processing+0x1c4>
					led_off(RED1);
 800059a:	2040      	movs	r0, #64	; 0x40
 800059c:	f000 fc08 	bl	8000db0 <led_off>
					led_on(AMBER1);
 80005a0:	2020      	movs	r0, #32
 80005a2:	f000 fbf3 	bl	8000d8c <led_on>
					led_off(GREEN1);
 80005a6:	2010      	movs	r0, #16
 80005a8:	f000 fc02 	bl	8000db0 <led_off>
					status2 = 0;
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <fsm_processing+0x284>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
					count2 = amberTime;
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <fsm_processing+0x278>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a30      	ldr	r2, [pc, #192]	; (8000678 <fsm_processing+0x280>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e013      	b.n	80005e4 <fsm_processing+0x1ec>
				}
				else if(status2 == 21){//Led xanh
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <fsm_processing+0x284>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b15      	cmp	r3, #21
 80005c2:	d10f      	bne.n	80005e4 <fsm_processing+0x1ec>
					led_off(RED1);
 80005c4:	2040      	movs	r0, #64	; 0x40
 80005c6:	f000 fbf3 	bl	8000db0 <led_off>
					led_off(AMBER1);
 80005ca:	2020      	movs	r0, #32
 80005cc:	f000 fbf0 	bl	8000db0 <led_off>
					led_on(GREEN1);
 80005d0:	2010      	movs	r0, #16
 80005d2:	f000 fbdb 	bl	8000d8c <led_on>
					status2 = 1;
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <fsm_processing+0x284>)
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
					count2 = greenTime;
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <fsm_processing+0x27c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <fsm_processing+0x280>)
 80005e2:	6013      	str	r3, [r2, #0]
				}
			}
			count1--;
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <fsm_processing+0x270>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <fsm_processing+0x270>)
 80005ec:	6013      	str	r3, [r2, #0]
			count2--;
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <fsm_processing+0x280>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <fsm_processing+0x280>)
 80005f6:	6013      	str	r3, [r2, #0]
			valueSEG12 = count1;//Hiển thị đếm ngược led trên dưới
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <fsm_processing+0x270>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <fsm_processing+0x258>)
 80005fe:	6013      	str	r3, [r2, #0]
			valueSEG34 = count2;//Hiển thị đếm ngược led trái phải
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <fsm_processing+0x280>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <fsm_processing+0x25c>)
 8000606:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fd44 	bl	8001098 <setTimer2>
		}
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <fsm_processing+0x260>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	f040 814f 	bne.w	80008b8 <fsm_processing+0x4c0>
			if(Index > 3) Index = 0;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <fsm_processing+0x254>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b03      	cmp	r3, #3
 8000620:	dd02      	ble.n	8000628 <fsm_processing+0x230>
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <fsm_processing+0x254>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <fsm_processing+0x254>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	4907      	ldr	r1, [pc, #28]	; (800064c <fsm_processing+0x254>)
 8000630:	600a      	str	r2, [r1, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fb28 	bl	8000c88 <update7SEG>
			setTimer1(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f000 fd10 	bl	8001060 <setTimer1>
		}
		break;
 8000640:	e13a      	b.n	80008b8 <fsm_processing+0x4c0>
 8000642:	bf00      	nop
 8000644:	20000048 	.word	0x20000048
 8000648:	20000070 	.word	0x20000070
 800064c:	20000058 	.word	0x20000058
 8000650:	200000a8 	.word	0x200000a8
 8000654:	200000a4 	.word	0x200000a4
 8000658:	20000060 	.word	0x20000060
 800065c:	20000004 	.word	0x20000004
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000068 	.word	0x20000068
 8000668:	20000050 	.word	0x20000050
 800066c:	2000004c 	.word	0x2000004c
 8000670:	20000008 	.word	0x20000008
 8000674:	2000000c 	.word	0x2000000c
 8000678:	20000054 	.word	0x20000054
 800067c:	20000000 	.word	0x20000000

	case MODE2:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 8000680:	4b92      	ldr	r3, [pc, #584]	; (80008cc <fsm_processing+0x4d4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d104      	bne.n	8000692 <fsm_processing+0x29a>
			getKeyInput();
 8000688:	f7ff fdc4 	bl	8000214 <getKeyInput>
			setTimer3(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f000 fd1f 	bl	80010d0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 3
		if(isSelectPressed() == 1){
 8000692:	f7ff fd89 	bl	80001a8 <isSelectPressed>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d109      	bne.n	80006b0 <fsm_processing+0x2b8>
			MODE = MODE3;
 800069c:	4b8c      	ldr	r3, [pc, #560]	; (80008d0 <fsm_processing+0x4d8>)
 800069e:	2203      	movs	r2, #3
 80006a0:	701a      	strb	r2, [r3, #0]
			timeAmberTemp = amberTime;
 80006a2:	4b8c      	ldr	r3, [pc, #560]	; (80008d4 <fsm_processing+0x4dc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a8c      	ldr	r2, [pc, #560]	; (80008d8 <fsm_processing+0x4e0>)
 80006a8:	6013      	str	r3, [r2, #0]
			Index = 0;
 80006aa:	4b8c      	ldr	r3, [pc, #560]	; (80008dc <fsm_processing+0x4e4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led đỏ
		if(isDurationPressed() == 1){
 80006b0:	f7ff fd8c 	bl	80001cc <isDurationPressed>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d10b      	bne.n	80006d2 <fsm_processing+0x2da>
			timeRedTemp++;
 80006ba:	4b89      	ldr	r3, [pc, #548]	; (80008e0 <fsm_processing+0x4e8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a87      	ldr	r2, [pc, #540]	; (80008e0 <fsm_processing+0x4e8>)
 80006c2:	6013      	str	r3, [r2, #0]
			if(timeRedTemp >= 100) timeRedTemp = 1;
 80006c4:	4b86      	ldr	r3, [pc, #536]	; (80008e0 <fsm_processing+0x4e8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b63      	cmp	r3, #99	; 0x63
 80006ca:	dd02      	ble.n	80006d2 <fsm_processing+0x2da>
 80006cc:	4b84      	ldr	r3, [pc, #528]	; (80008e0 <fsm_processing+0x4e8>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 80006d2:	f7ff fd8d 	bl	80001f0 <isSetPressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d103      	bne.n	80006e4 <fsm_processing+0x2ec>
			redTime = timeRedTemp;
 80006dc:	4b80      	ldr	r3, [pc, #512]	; (80008e0 <fsm_processing+0x4e8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a80      	ldr	r2, [pc, #512]	; (80008e4 <fsm_processing+0x4ec>)
 80006e2:	6013      	str	r3, [r2, #0]
		}
		led_off(GREEN0);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 fb63 	bl	8000db0 <led_off>
		led_off(GREEN1);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f000 fb60 	bl	8000db0 <led_off>
		led_off(AMBER0);
 80006f0:	2004      	movs	r0, #4
 80006f2:	f000 fb5d 	bl	8000db0 <led_off>
		led_off(AMBER1);
 80006f6:	2020      	movs	r0, #32
 80006f8:	f000 fb5a 	bl	8000db0 <led_off>
		valueSEG12 = 2;
 80006fc:	4b7a      	ldr	r3, [pc, #488]	; (80008e8 <fsm_processing+0x4f0>)
 80006fe:	2202      	movs	r2, #2
 8000700:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeRedTemp;
 8000702:	4b77      	ldr	r3, [pc, #476]	; (80008e0 <fsm_processing+0x4e8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a79      	ldr	r2, [pc, #484]	; (80008ec <fsm_processing+0x4f4>)
 8000708:	6013      	str	r3, [r2, #0]
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 800070a:	4b79      	ldr	r3, [pc, #484]	; (80008f0 <fsm_processing+0x4f8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	f040 80d4 	bne.w	80008bc <fsm_processing+0x4c4>
			if(Index > 3) Index = 0;
 8000714:	4b71      	ldr	r3, [pc, #452]	; (80008dc <fsm_processing+0x4e4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	dd02      	ble.n	8000722 <fsm_processing+0x32a>
 800071c:	4b6f      	ldr	r3, [pc, #444]	; (80008dc <fsm_processing+0x4e4>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000722:	4b6e      	ldr	r3, [pc, #440]	; (80008dc <fsm_processing+0x4e4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	496c      	ldr	r1, [pc, #432]	; (80008dc <fsm_processing+0x4e4>)
 800072a:	600a      	str	r2, [r1, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 faab 	bl	8000c88 <update7SEG>
			setTimer1(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f000 fc93 	bl	8001060 <setTimer1>
			blink_red();
 800073a:	f000 fb4b 	bl	8000dd4 <blink_red>
		}
		break;
 800073e:	e0bd      	b.n	80008bc <fsm_processing+0x4c4>

	case MODE3:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 8000740:	4b62      	ldr	r3, [pc, #392]	; (80008cc <fsm_processing+0x4d4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d104      	bne.n	8000752 <fsm_processing+0x35a>
			getKeyInput();
 8000748:	f7ff fd64 	bl	8000214 <getKeyInput>
			setTimer3(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f000 fcbf 	bl	80010d0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 4
		if(isSelectPressed() == 1){
 8000752:	f7ff fd29 	bl	80001a8 <isSelectPressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <fsm_processing+0x37a>
			MODE = MODE4;
 800075c:	4b5c      	ldr	r3, [pc, #368]	; (80008d0 <fsm_processing+0x4d8>)
 800075e:	2204      	movs	r2, #4
 8000760:	701a      	strb	r2, [r3, #0]
			timeGreenTemp = greenTime;
 8000762:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <fsm_processing+0x4fc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a64      	ldr	r2, [pc, #400]	; (80008f8 <fsm_processing+0x500>)
 8000768:	6013      	str	r3, [r2, #0]
			Index = 0;
 800076a:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <fsm_processing+0x4e4>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
			break;
 8000770:	e0a9      	b.n	80008c6 <fsm_processing+0x4ce>
		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led vàng
		if(isDurationPressed() == 1){
 8000772:	f7ff fd2b 	bl	80001cc <isDurationPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10b      	bne.n	8000794 <fsm_processing+0x39c>
			timeAmberTemp++;
 800077c:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <fsm_processing+0x4e0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <fsm_processing+0x4e0>)
 8000784:	6013      	str	r3, [r2, #0]
			if(timeAmberTemp >= 100) timeAmberTemp = 1;
 8000786:	4b54      	ldr	r3, [pc, #336]	; (80008d8 <fsm_processing+0x4e0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b63      	cmp	r3, #99	; 0x63
 800078c:	dd02      	ble.n	8000794 <fsm_processing+0x39c>
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <fsm_processing+0x4e0>)
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 8000794:	f7ff fd2c 	bl	80001f0 <isSetPressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d103      	bne.n	80007a6 <fsm_processing+0x3ae>
			amberTime = timeAmberTemp;
 800079e:	4b4e      	ldr	r3, [pc, #312]	; (80008d8 <fsm_processing+0x4e0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a4c      	ldr	r2, [pc, #304]	; (80008d4 <fsm_processing+0x4dc>)
 80007a4:	6013      	str	r3, [r2, #0]
		}
		led_off(RED0);
 80007a6:	2008      	movs	r0, #8
 80007a8:	f000 fb02 	bl	8000db0 <led_off>
		led_off(RED1);
 80007ac:	2040      	movs	r0, #64	; 0x40
 80007ae:	f000 faff 	bl	8000db0 <led_off>
		led_off(GREEN0);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 fafc 	bl	8000db0 <led_off>
		led_off(GREEN1);
 80007b8:	2010      	movs	r0, #16
 80007ba:	f000 faf9 	bl	8000db0 <led_off>
		valueSEG12 = 3;
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <fsm_processing+0x4f0>)
 80007c0:	2203      	movs	r2, #3
 80007c2:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeAmberTemp;
 80007c4:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <fsm_processing+0x4e0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a48      	ldr	r2, [pc, #288]	; (80008ec <fsm_processing+0x4f4>)
 80007ca:	6013      	str	r3, [r2, #0]
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 80007cc:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <fsm_processing+0x4f8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d175      	bne.n	80008c0 <fsm_processing+0x4c8>
			if(Index > 3) Index = 0;
 80007d4:	4b41      	ldr	r3, [pc, #260]	; (80008dc <fsm_processing+0x4e4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dd02      	ble.n	80007e2 <fsm_processing+0x3ea>
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <fsm_processing+0x4e4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <fsm_processing+0x4e4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	493c      	ldr	r1, [pc, #240]	; (80008dc <fsm_processing+0x4e4>)
 80007ea:	600a      	str	r2, [r1, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fa4b 	bl	8000c88 <update7SEG>
			setTimer1(500);
 80007f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f6:	f000 fc33 	bl	8001060 <setTimer1>
			blink_amber();
 80007fa:	f000 faf9 	bl	8000df0 <blink_amber>
		}
		break;
 80007fe:	e05f      	b.n	80008c0 <fsm_processing+0x4c8>

	case MODE4:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 8000800:	4b32      	ldr	r3, [pc, #200]	; (80008cc <fsm_processing+0x4d4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d104      	bne.n	8000812 <fsm_processing+0x41a>
			getKeyInput();
 8000808:	f7ff fd04 	bl	8000214 <getKeyInput>
			setTimer3(10);
 800080c:	200a      	movs	r0, #10
 800080e:	f000 fc5f 	bl	80010d0 <setTimer3>
		}
		//Khi nhấn nút Mode sẽ chuyển về STATE_INIT
		if(isSelectPressed() == 1){
 8000812:	f7ff fcc9 	bl	80001a8 <isSelectPressed>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d102      	bne.n	8000822 <fsm_processing+0x42a>
			MODE = STATE_INIT;
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <fsm_processing+0x4d8>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led xanh
		if(isDurationPressed() == 1){
 8000822:	f7ff fcd3 	bl	80001cc <isDurationPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10b      	bne.n	8000844 <fsm_processing+0x44c>
			timeGreenTemp++;
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <fsm_processing+0x500>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <fsm_processing+0x500>)
 8000834:	6013      	str	r3, [r2, #0]
			if(timeGreenTemp >= 100) timeGreenTemp = 1;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <fsm_processing+0x500>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b63      	cmp	r3, #99	; 0x63
 800083c:	dd02      	ble.n	8000844 <fsm_processing+0x44c>
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <fsm_processing+0x500>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 8000844:	f7ff fcd4 	bl	80001f0 <isSetPressed>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d103      	bne.n	8000856 <fsm_processing+0x45e>
			greenTime = timeGreenTemp;
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <fsm_processing+0x500>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <fsm_processing+0x4fc>)
 8000854:	6013      	str	r3, [r2, #0]
		}
		led_off(RED0);
 8000856:	2008      	movs	r0, #8
 8000858:	f000 faaa 	bl	8000db0 <led_off>
		led_off(RED1);
 800085c:	2040      	movs	r0, #64	; 0x40
 800085e:	f000 faa7 	bl	8000db0 <led_off>
		led_off(AMBER0);
 8000862:	2004      	movs	r0, #4
 8000864:	f000 faa4 	bl	8000db0 <led_off>
		led_off(AMBER1);
 8000868:	2020      	movs	r0, #32
 800086a:	f000 faa1 	bl	8000db0 <led_off>
		valueSEG12 = 4;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <fsm_processing+0x4f0>)
 8000870:	2204      	movs	r2, #4
 8000872:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeGreenTemp;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <fsm_processing+0x500>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <fsm_processing+0x4f4>)
 800087a:	6013      	str	r3, [r2, #0]
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <fsm_processing+0x4f8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d11f      	bne.n	80008c4 <fsm_processing+0x4cc>
		{
			if (Index > 3) Index = 0;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <fsm_processing+0x4e4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	dd02      	ble.n	8000892 <fsm_processing+0x49a>
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <fsm_processing+0x4e4>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <fsm_processing+0x4e4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	4910      	ldr	r1, [pc, #64]	; (80008dc <fsm_processing+0x4e4>)
 800089a:	600a      	str	r2, [r1, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f9f3 	bl	8000c88 <update7SEG>
			setTimer1(500);
 80008a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a6:	f000 fbdb 	bl	8001060 <setTimer1>
			blink_green();
 80008aa:	f000 faaf 	bl	8000e0c <blink_green>
		}
		break;
 80008ae:	e009      	b.n	80008c4 <fsm_processing+0x4cc>

	default:
		break;
 80008b0:	bf00      	nop
 80008b2:	e008      	b.n	80008c6 <fsm_processing+0x4ce>
		break;
 80008b4:	bf00      	nop
 80008b6:	e006      	b.n	80008c6 <fsm_processing+0x4ce>
		break;
 80008b8:	bf00      	nop
 80008ba:	e004      	b.n	80008c6 <fsm_processing+0x4ce>
		break;
 80008bc:	bf00      	nop
 80008be:	e002      	b.n	80008c6 <fsm_processing+0x4ce>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <fsm_processing+0x4ce>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000070 	.word	0x20000070
 80008d0:	20000048 	.word	0x20000048
 80008d4:	20000008 	.word	0x20000008
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	20000058 	.word	0x20000058
 80008e0:	200000a0 	.word	0x200000a0
 80008e4:	20000004 	.word	0x20000004
 80008e8:	200000a8 	.word	0x200000a8
 80008ec:	200000a4 	.word	0x200000a4
 80008f0:	20000060 	.word	0x20000060
 80008f4:	2000000c 	.word	0x2000000c
 80008f8:	20000098 	.word	0x20000098

080008fc <display7SEG>:
 */

#include "led.h"

//số hiển thị trên led 7 đoạn
void display7SEG(int num){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d128      	bne.n	800095c <display7SEG+0x60>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	48d2      	ldr	r0, [pc, #840]	; (8000c58 <display7SEG+0x35c>)
 8000910:	f000 fffd 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	48cf      	ldr	r0, [pc, #828]	; (8000c58 <display7SEG+0x35c>)
 800091c:	f000 fff7 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	48cc      	ldr	r0, [pc, #816]	; (8000c58 <display7SEG+0x35c>)
 8000928:	f000 fff1 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	48c9      	ldr	r0, [pc, #804]	; (8000c58 <display7SEG+0x35c>)
 8000934:	f000 ffeb 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093e:	48c6      	ldr	r0, [pc, #792]	; (8000c58 <display7SEG+0x35c>)
 8000940:	f000 ffe5 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094a:	48c3      	ldr	r0, [pc, #780]	; (8000c58 <display7SEG+0x35c>)
 800094c:	f000 ffdf 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	48c0      	ldr	r0, [pc, #768]	; (8000c58 <display7SEG+0x35c>)
 8000958:	f000 ffd9 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 1){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d128      	bne.n	80009b4 <display7SEG+0xb8>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	48bc      	ldr	r0, [pc, #752]	; (8000c58 <display7SEG+0x35c>)
 8000968:	f000 ffd1 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000972:	48b9      	ldr	r0, [pc, #740]	; (8000c58 <display7SEG+0x35c>)
 8000974:	f000 ffcb 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	48b6      	ldr	r0, [pc, #728]	; (8000c58 <display7SEG+0x35c>)
 8000980:	f000 ffc5 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	48b3      	ldr	r0, [pc, #716]	; (8000c58 <display7SEG+0x35c>)
 800098c:	f000 ffbf 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	48b0      	ldr	r0, [pc, #704]	; (8000c58 <display7SEG+0x35c>)
 8000998:	f000 ffb9 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	48ad      	ldr	r0, [pc, #692]	; (8000c58 <display7SEG+0x35c>)
 80009a4:	f000 ffb3 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	48aa      	ldr	r0, [pc, #680]	; (8000c58 <display7SEG+0x35c>)
 80009b0:	f000 ffad 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 2){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d128      	bne.n	8000a0c <display7SEG+0x110>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	48a6      	ldr	r0, [pc, #664]	; (8000c58 <display7SEG+0x35c>)
 80009c0:	f000 ffa5 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ca:	48a3      	ldr	r0, [pc, #652]	; (8000c58 <display7SEG+0x35c>)
 80009cc:	f000 ff9f 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d6:	48a0      	ldr	r0, [pc, #640]	; (8000c58 <display7SEG+0x35c>)
 80009d8:	f000 ff99 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e2:	489d      	ldr	r0, [pc, #628]	; (8000c58 <display7SEG+0x35c>)
 80009e4:	f000 ff93 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ee:	489a      	ldr	r0, [pc, #616]	; (8000c58 <display7SEG+0x35c>)
 80009f0:	f000 ff8d 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4897      	ldr	r0, [pc, #604]	; (8000c58 <display7SEG+0x35c>)
 80009fc:	f000 ff87 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4894      	ldr	r0, [pc, #592]	; (8000c58 <display7SEG+0x35c>)
 8000a08:	f000 ff81 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d128      	bne.n	8000a64 <display7SEG+0x168>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	4890      	ldr	r0, [pc, #576]	; (8000c58 <display7SEG+0x35c>)
 8000a18:	f000 ff79 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a22:	488d      	ldr	r0, [pc, #564]	; (8000c58 <display7SEG+0x35c>)
 8000a24:	f000 ff73 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	488a      	ldr	r0, [pc, #552]	; (8000c58 <display7SEG+0x35c>)
 8000a30:	f000 ff6d 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	4887      	ldr	r0, [pc, #540]	; (8000c58 <display7SEG+0x35c>)
 8000a3c:	f000 ff67 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a46:	4884      	ldr	r0, [pc, #528]	; (8000c58 <display7SEG+0x35c>)
 8000a48:	f000 ff61 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a52:	4881      	ldr	r0, [pc, #516]	; (8000c58 <display7SEG+0x35c>)
 8000a54:	f000 ff5b 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	487e      	ldr	r0, [pc, #504]	; (8000c58 <display7SEG+0x35c>)
 8000a60:	f000 ff55 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d128      	bne.n	8000abc <display7SEG+0x1c0>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	487a      	ldr	r0, [pc, #488]	; (8000c58 <display7SEG+0x35c>)
 8000a70:	f000 ff4d 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	4877      	ldr	r0, [pc, #476]	; (8000c58 <display7SEG+0x35c>)
 8000a7c:	f000 ff47 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a86:	4874      	ldr	r0, [pc, #464]	; (8000c58 <display7SEG+0x35c>)
 8000a88:	f000 ff41 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	4871      	ldr	r0, [pc, #452]	; (8000c58 <display7SEG+0x35c>)
 8000a94:	f000 ff3b 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9e:	486e      	ldr	r0, [pc, #440]	; (8000c58 <display7SEG+0x35c>)
 8000aa0:	f000 ff35 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	486b      	ldr	r0, [pc, #428]	; (8000c58 <display7SEG+0x35c>)
 8000aac:	f000 ff2f 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	4868      	ldr	r0, [pc, #416]	; (8000c58 <display7SEG+0x35c>)
 8000ab8:	f000 ff29 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 5){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d128      	bne.n	8000b14 <display7SEG+0x218>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	4864      	ldr	r0, [pc, #400]	; (8000c58 <display7SEG+0x35c>)
 8000ac8:	f000 ff21 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	4861      	ldr	r0, [pc, #388]	; (8000c58 <display7SEG+0x35c>)
 8000ad4:	f000 ff1b 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	485e      	ldr	r0, [pc, #376]	; (8000c58 <display7SEG+0x35c>)
 8000ae0:	f000 ff15 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	485b      	ldr	r0, [pc, #364]	; (8000c58 <display7SEG+0x35c>)
 8000aec:	f000 ff0f 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	4858      	ldr	r0, [pc, #352]	; (8000c58 <display7SEG+0x35c>)
 8000af8:	f000 ff09 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b02:	4855      	ldr	r0, [pc, #340]	; (8000c58 <display7SEG+0x35c>)
 8000b04:	f000 ff03 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	4852      	ldr	r0, [pc, #328]	; (8000c58 <display7SEG+0x35c>)
 8000b10:	f000 fefd 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 6){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d128      	bne.n	8000b6c <display7SEG+0x270>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	484e      	ldr	r0, [pc, #312]	; (8000c58 <display7SEG+0x35c>)
 8000b20:	f000 fef5 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	484b      	ldr	r0, [pc, #300]	; (8000c58 <display7SEG+0x35c>)
 8000b2c:	f000 feef 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	4848      	ldr	r0, [pc, #288]	; (8000c58 <display7SEG+0x35c>)
 8000b38:	f000 fee9 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4845      	ldr	r0, [pc, #276]	; (8000c58 <display7SEG+0x35c>)
 8000b44:	f000 fee3 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4842      	ldr	r0, [pc, #264]	; (8000c58 <display7SEG+0x35c>)
 8000b50:	f000 fedd 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5a:	483f      	ldr	r0, [pc, #252]	; (8000c58 <display7SEG+0x35c>)
 8000b5c:	f000 fed7 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	483c      	ldr	r0, [pc, #240]	; (8000c58 <display7SEG+0x35c>)
 8000b68:	f000 fed1 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d128      	bne.n	8000bc4 <display7SEG+0x2c8>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	4838      	ldr	r0, [pc, #224]	; (8000c58 <display7SEG+0x35c>)
 8000b78:	f000 fec9 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4835      	ldr	r0, [pc, #212]	; (8000c58 <display7SEG+0x35c>)
 8000b84:	f000 fec3 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8e:	4832      	ldr	r0, [pc, #200]	; (8000c58 <display7SEG+0x35c>)
 8000b90:	f000 febd 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	482f      	ldr	r0, [pc, #188]	; (8000c58 <display7SEG+0x35c>)
 8000b9c:	f000 feb7 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	482c      	ldr	r0, [pc, #176]	; (8000c58 <display7SEG+0x35c>)
 8000ba8:	f000 feb1 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	4829      	ldr	r0, [pc, #164]	; (8000c58 <display7SEG+0x35c>)
 8000bb4:	f000 feab 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <display7SEG+0x35c>)
 8000bc0:	f000 fea5 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d128      	bne.n	8000c1c <display7SEG+0x320>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	4822      	ldr	r0, [pc, #136]	; (8000c58 <display7SEG+0x35c>)
 8000bd0:	f000 fe9d 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <display7SEG+0x35c>)
 8000bdc:	f000 fe97 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <display7SEG+0x35c>)
 8000be8:	f000 fe91 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <display7SEG+0x35c>)
 8000bf4:	f000 fe8b 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	4816      	ldr	r0, [pc, #88]	; (8000c58 <display7SEG+0x35c>)
 8000c00:	f000 fe85 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <display7SEG+0x35c>)
 8000c0c:	f000 fe7f 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	4810      	ldr	r0, [pc, #64]	; (8000c58 <display7SEG+0x35c>)
 8000c18:	f000 fe79 	bl	800190e <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b09      	cmp	r3, #9
 8000c20:	d12b      	bne.n	8000c7a <display7SEG+0x37e>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <display7SEG+0x35c>)
 8000c28:	f000 fe71 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <display7SEG+0x35c>)
 8000c34:	f000 fe6b 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <display7SEG+0x35c>)
 8000c40:	f000 fe65 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <display7SEG+0x35c>)
 8000c4c:	f000 fe5f 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c56:	e001      	b.n	8000c5c <display7SEG+0x360>
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <display7SEG+0x388>)
 8000c5e:	f000 fe56 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <display7SEG+0x388>)
 8000c6a:	f000 fe50 	bl	800190e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <display7SEG+0x388>)
 8000c76:	f000 fe4a 	bl	800190e <HAL_GPIO_WritePin>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010800 	.word	0x40010800

08000c88 <update7SEG>:

int valueSEG12;
int valueSEG34;
void update7SEG(int index) { //Quét led
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	//Reset led
    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2101      	movs	r1, #1
 8000c94:	4839      	ldr	r0, [pc, #228]	; (8000d7c <update7SEG+0xf4>)
 8000c96:	f000 fe3a 	bl	800190e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <update7SEG+0xf4>)
 8000ca0:	f000 fe35 	bl	800190e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4834      	ldr	r0, [pc, #208]	; (8000d7c <update7SEG+0xf4>)
 8000caa:	f000 fe30 	bl	800190e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	4832      	ldr	r0, [pc, #200]	; (8000d7c <update7SEG+0xf4>)
 8000cb4:	f000 fe2b 	bl	800190e <HAL_GPIO_WritePin>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d858      	bhi.n	8000d70 <update7SEG+0xe8>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <update7SEG+0x3c>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000cf7 	.word	0x08000cf7
 8000ccc:	08000d23 	.word	0x08000d23
 8000cd0:	08000d45 	.word	0x08000d45

    switch(index) {
        case 0:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <update7SEG+0xf4>)
 8000cda:	f000 fe18 	bl	800190e <HAL_GPIO_WritePin>
            display7SEG(valueSEG12 / 10);
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <update7SEG+0xf8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a28      	ldr	r2, [pc, #160]	; (8000d84 <update7SEG+0xfc>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1092      	asrs	r2, r2, #2
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe04 	bl	80008fc <display7SEG>
            break;
 8000cf4:	e03d      	b.n	8000d72 <update7SEG+0xea>
        case 1:
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4820      	ldr	r0, [pc, #128]	; (8000d7c <update7SEG+0xf4>)
 8000cfc:	f000 fe07 	bl	800190e <HAL_GPIO_WritePin>
            display7SEG(valueSEG12 % 10);
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <update7SEG+0xf8>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <update7SEG+0xfc>)
 8000d06:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0a:	1099      	asrs	r1, r3, #2
 8000d0c:	17d3      	asrs	r3, r2, #31
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	460b      	mov	r3, r1
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	1ad1      	subs	r1, r2, r3
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	f7ff fdee 	bl	80008fc <display7SEG>
            break;
 8000d20:	e027      	b.n	8000d72 <update7SEG+0xea>
        case 2:
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	4815      	ldr	r0, [pc, #84]	; (8000d7c <update7SEG+0xf4>)
 8000d28:	f000 fdf1 	bl	800190e <HAL_GPIO_WritePin>
            display7SEG(valueSEG34 / 10);
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <update7SEG+0x100>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <update7SEG+0xfc>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fddd 	bl	80008fc <display7SEG>
            break;
 8000d42:	e016      	b.n	8000d72 <update7SEG+0xea>
        case 3:
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2108      	movs	r1, #8
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <update7SEG+0xf4>)
 8000d4a:	f000 fde0 	bl	800190e <HAL_GPIO_WritePin>
            display7SEG(valueSEG12 % 10);
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <update7SEG+0xf8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <update7SEG+0xfc>)
 8000d54:	fb83 1302 	smull	r1, r3, r3, r2
 8000d58:	1099      	asrs	r1, r3, #2
 8000d5a:	17d3      	asrs	r3, r2, #31
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	460b      	mov	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	1ad1      	subs	r1, r2, r3
 8000d68:	4608      	mov	r0, r1
 8000d6a:	f7ff fdc7 	bl	80008fc <display7SEG>
            break;
 8000d6e:	e000      	b.n	8000d72 <update7SEG+0xea>
        default:
            break;
 8000d70:	bf00      	nop
    }
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	200000a8 	.word	0x200000a8
 8000d84:	66666667 	.word	0x66666667
 8000d88:	200000a4 	.word	0x200000a4

08000d8c <led_on>:


//bật tắt đèn giao thông
void led_on(int pin){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 0);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <led_on+0x20>)
 8000d9e:	f000 fdb6 	bl	800190e <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010800 	.word	0x40010800

08000db0 <led_off>:

void led_off(int pin){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 1);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <led_off+0x20>)
 8000dc2:	f000 fda4 	bl	800190e <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <blink_red>:

//nhấp nháy đèn khi vào chế độ chỉnh thời gian
void blink_red(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED0_GPIO_Port , RED0_Pin);
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <blink_red+0x18>)
 8000ddc:	f000 fdaf 	bl	800193e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED1_GPIO_Port , RED1_Pin);
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	4802      	ldr	r0, [pc, #8]	; (8000dec <blink_red+0x18>)
 8000de4:	f000 fdab 	bl	800193e <HAL_GPIO_TogglePin>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010800 	.word	0x40010800

08000df0 <blink_amber>:

void blink_amber(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(AMBER0_GPIO_Port , AMBER0_Pin);
 8000df4:	2104      	movs	r1, #4
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <blink_amber+0x18>)
 8000df8:	f000 fda1 	bl	800193e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(AMBER1_GPIO_Port , AMBER1_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <blink_amber+0x18>)
 8000e00:	f000 fd9d 	bl	800193e <HAL_GPIO_TogglePin>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40010800 	.word	0x40010800

08000e0c <blink_green>:

void blink_green(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN0_GPIO_Port , GREEN0_Pin);
 8000e10:	2102      	movs	r1, #2
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <blink_green+0x18>)
 8000e14:	f000 fd93 	bl	800193e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port , GREEN1_Pin);
 8000e18:	2110      	movs	r1, #16
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <blink_green+0x18>)
 8000e1c:	f000 fd8f 	bl	800193e <HAL_GPIO_TogglePin>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010800 	.word	0x40010800

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2c:	f000 fa6e 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e30:	f000 f81a 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e34:	f000 f854 	bl	8000ee0 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000e38:	f000 f89e 	bl	8000f78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <main+0x3c>)
 8000e3e:	f001 f9c3 	bl	80021c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialButton();
 8000e42:	f7ff f983 	bl	800014c <initialButton>
  setTimer1(500); //Th�?i gian quét led và chớp tắt led giao thông
 8000e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4a:	f000 f909 	bl	8001060 <setTimer1>
  setTimer2(1000); //Th�?i gian để cập nhật giá trị led
 8000e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e52:	f000 f921 	bl	8001098 <setTimer2>
  setTimer3(10); //Th�?i gian xử lý debouce
 8000e56:	200a      	movs	r0, #10
 8000e58:	f000 f93a 	bl	80010d0 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_processing();
 8000e5c:	f7ff facc 	bl	80003f8 <fsm_processing>
 8000e60:	e7fc      	b.n	8000e5c <main+0x34>
 8000e62:	bf00      	nop
 8000e64:	200000ac 	.word	0x200000ac

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fd56 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd66 	bl	8001970 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f8d3 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffd2 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f8bf 	bl	8001054 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f14:	2209      	movs	r2, #9
 8000f16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f26:	f001 f8ff 	bl	8002128 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f30:	f000 f890 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f42:	f001 fa7d 	bl	8002440 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f882 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f5e:	f001 fc55 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f68:	f000 f874 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000ac 	.word	0x200000ac

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_GPIO_Init+0xb4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a26      	ldr	r2, [pc, #152]	; (800102c <MX_GPIO_Init+0xb4>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_GPIO_Init+0xb4>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_GPIO_Init+0xb4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a20      	ldr	r2, [pc, #128]	; (800102c <MX_GPIO_Init+0xb4>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_GPIO_Init+0xb4>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN0_Pin|AMBER0_Pin|RED0_Pin|GREEN1_Pin
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000fc2:	481b      	ldr	r0, [pc, #108]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000fc4:	f000 fca3 	bl	800190e <HAL_GPIO_WritePin>
                          |AMBER1_Pin|RED1_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	210f      	movs	r1, #15
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <MX_GPIO_Init+0xbc>)
 8000fce:	f000 fc9e 	bl	800190e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN0_Pin AMBER0_Pin RED0_Pin GREEN1_Pin
                           AMBER1_Pin RED1_Pin a_Pin b_Pin
                           c_Pin d_Pin e_Pin f_Pin
                           g_Pin */
  GPIO_InitStruct.Pin = GREEN0_Pin|AMBER0_Pin|RED0_Pin|GREEN1_Pin
 8000fd2:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000fd6:	60bb      	str	r3, [r7, #8]
                          |AMBER1_Pin|RED1_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000fec:	f000 fafe 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <MX_GPIO_Init+0xbc>)
 8001008:	f000 faf0 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Select_Pin Duration_Pin Set_Pin */
  GPIO_InitStruct.Pin = Select_Pin|Duration_Pin|Set_Pin;
 800100c:	2370      	movs	r3, #112	; 0x70
 800100e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xbc>)
 8001020:	f000 fae4 	bl	80015ec <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00

08001038 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	timer1Run();
 8001040:	f000 f862 	bl	8001108 <timer1Run>
	timer2Run();
 8001044:	f000 f87a 	bl	800113c <timer2Run>
	timer3Run();
 8001048:	f000 f892 	bl	8001170 <timer3Run>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <setTimer1+0x2c>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1092      	asrs	r2, r2, #2
 8001072:	17db      	asrs	r3, r3, #31
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4a06      	ldr	r2, [pc, #24]	; (8001090 <setTimer1+0x30>)
 8001078:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <setTimer1+0x34>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	66666667 	.word	0x66666667
 8001090:	2000005c 	.word	0x2000005c
 8001094:	20000060 	.word	0x20000060

08001098 <setTimer2>:

void setTimer2(int duration)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <setTimer2+0x2c>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1092      	asrs	r2, r2, #2
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <setTimer2+0x30>)
 80010b0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <setTimer2+0x34>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	66666667 	.word	0x66666667
 80010c8:	20000064 	.word	0x20000064
 80010cc:	20000068 	.word	0x20000068

080010d0 <setTimer3>:

void setTimer3(int duration)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <setTimer3+0x2c>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1092      	asrs	r2, r2, #2
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <setTimer3+0x30>)
 80010e8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <setTimer3+0x34>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	66666667 	.word	0x66666667
 8001100:	2000006c 	.word	0x2000006c
 8001104:	20000070 	.word	0x20000070

08001108 <timer1Run>:

void timer1Run()
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <timer1Run+0x2c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd0b      	ble.n	800112c <timer1Run+0x24>
	{
		timer1_counter--;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <timer1Run+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <timer1Run+0x2c>)
 800111c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <timer1Run+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc02      	bgt.n	800112c <timer1Run+0x24>
		{
			timer1_flag = 1;
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <timer1Run+0x30>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
		}

	}
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	2000005c 	.word	0x2000005c
 8001138:	20000060 	.word	0x20000060

0800113c <timer2Run>:

void timer2Run()
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	if (timer2_counter > 0)
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <timer2Run+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	dd0b      	ble.n	8001160 <timer2Run+0x24>
	{
		timer2_counter--;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <timer2Run+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a06      	ldr	r2, [pc, #24]	; (8001168 <timer2Run+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <timer2Run+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dc02      	bgt.n	8001160 <timer2Run+0x24>
		{
			timer2_flag = 1;
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <timer2Run+0x30>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000064 	.word	0x20000064
 800116c:	20000068 	.word	0x20000068

08001170 <timer3Run>:

void timer3Run()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	if (timer3_counter > 0)
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <timer3Run+0x2c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd0b      	ble.n	8001194 <timer3Run+0x24>
	{
		timer3_counter--;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <timer3Run+0x2c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <timer3Run+0x2c>)
 8001184:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <timer3Run+0x2c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dc02      	bgt.n	8001194 <timer3Run+0x24>
		{
			timer3_flag = 1;
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <timer3Run+0x30>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	2000006c 	.word	0x2000006c
 80011a0:	20000070 	.word	0x20000070

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_MspInit+0x5c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_MspInit+0x5c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_MspInit+0x60>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_MspInit+0x60>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000

08001208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d113      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	201c      	movs	r0, #28
 8001238:	f000 f9a1 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800123c:	201c      	movs	r0, #28
 800123e:	f000 f9ba 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 f87f 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM2_IRQHandler+0x10>)
 80012a6:	f000 ffdb 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000ac 	.word	0x200000ac

080012b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff fff8 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012c6:	490c      	ldr	r1, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012dc:	4c09      	ldr	r4, [pc, #36]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f001 faf9 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff fd9b 	bl	8000e28 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012fc:	0800297c 	.word	0x0800297c
  ldr r2, =_sbss
 8001300:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001304:	200000f8 	.word	0x200000f8

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f923 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff ff3c 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f93b 	bl	80015d2 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f903 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000010 	.word	0x20000010
 8001390:	20000018 	.word	0x20000018
 8001394:	20000014 	.word	0x20000014

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000018 	.word	0x20000018
 80013b8:	200000f4 	.word	0x200000f4

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	200000f4 	.word	0x200000f4

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <__NVIC_EnableIRQ+0x34>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff90 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff2d 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff42 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff35 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e148      	b.n	8001892 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001600:	2201      	movs	r2, #1
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 8137 	bne.w	800188c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4aa3      	ldr	r2, [pc, #652]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05e      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001628:	4aa1      	ldr	r2, [pc, #644]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d875      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800162e:	4aa1      	ldr	r2, [pc, #644]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d058      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001634:	4a9f      	ldr	r2, [pc, #636]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d86f      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800163a:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d052      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001640:	4a9d      	ldr	r2, [pc, #628]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d869      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001646:	4a9d      	ldr	r2, [pc, #628]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d04c      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 800164c:	4a9b      	ldr	r2, [pc, #620]	; (80018bc <HAL_GPIO_Init+0x2d0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d863      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001652:	4a9b      	ldr	r2, [pc, #620]	; (80018c0 <HAL_GPIO_Init+0x2d4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d046      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
 8001658:	4a99      	ldr	r2, [pc, #612]	; (80018c0 <HAL_GPIO_Init+0x2d4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d85d      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 800165e:	2b12      	cmp	r3, #18
 8001660:	d82a      	bhi.n	80016b8 <HAL_GPIO_Init+0xcc>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d859      	bhi.n	800171a <HAL_GPIO_Init+0x12e>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <HAL_GPIO_Init+0x80>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016d3 	.word	0x080016d3
 8001678:	08001715 	.word	0x08001715
 800167c:	0800171b 	.word	0x0800171b
 8001680:	0800171b 	.word	0x0800171b
 8001684:	0800171b 	.word	0x0800171b
 8001688:	0800171b 	.word	0x0800171b
 800168c:	0800171b 	.word	0x0800171b
 8001690:	0800171b 	.word	0x0800171b
 8001694:	0800171b 	.word	0x0800171b
 8001698:	0800171b 	.word	0x0800171b
 800169c:	0800171b 	.word	0x0800171b
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	0800171b 	.word	0x0800171b
 80016a8:	0800171b 	.word	0x0800171b
 80016ac:	0800171b 	.word	0x0800171b
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	4a82      	ldr	r2, [pc, #520]	; (80018c4 <HAL_GPIO_Init+0x2d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016be:	e02c      	b.n	800171a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e029      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	3304      	adds	r3, #4
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e024      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	3308      	adds	r3, #8
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e01f      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	330c      	adds	r3, #12
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e01a      	b.n	800171c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ee:	2304      	movs	r3, #4
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e013      	b.n	800171c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016fc:	2308      	movs	r3, #8
 80016fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	611a      	str	r2, [r3, #16]
          break;
 8001706:	e009      	b.n	800171c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	615a      	str	r2, [r3, #20]
          break;
 8001712:	e003      	b.n	800171c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x130>
          break;
 800171a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d801      	bhi.n	8001726 <HAL_GPIO_Init+0x13a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e001      	b.n	800172a <HAL_GPIO_Init+0x13e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3304      	adds	r3, #4
 800172a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d802      	bhi.n	8001738 <HAL_GPIO_Init+0x14c>
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x152>
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3b08      	subs	r3, #8
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	210f      	movs	r1, #15
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8090 	beq.w	800188c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x2e0>)
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1e0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a48      	ldr	r2, [pc, #288]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a47      	ldr	r2, [pc, #284]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017c4:	2303      	movs	r3, #3
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1e2>
 80017cc:	2300      	movs	r3, #0
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017de:	493b      	ldr	r1, [pc, #236]	; (80018cc <HAL_GPIO_Init+0x2e0>)
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	43db      	mvns	r3, r3
 800180e:	4933      	ldr	r1, [pc, #204]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001810:	4013      	ands	r3, r2
 8001812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	60cb      	str	r3, [r1, #12]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4929      	ldr	r1, [pc, #164]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001838:	4013      	ands	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4923      	ldr	r1, [pc, #140]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001860:	4013      	ands	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4919      	ldr	r1, [pc, #100]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	4915      	ldr	r1, [pc, #84]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001888:	4013      	ands	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f aeaf 	bne.w	8001600 <HAL_GPIO_Init+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	372c      	adds	r7, #44	; 0x2c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	10320000 	.word	0x10320000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10220000 	.word	0x10220000
 80018bc:	10210000 	.word	0x10210000
 80018c0:	10120000 	.word	0x10120000
 80018c4:	10110000 	.word	0x10110000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191e:	787b      	ldrb	r3, [r7, #1]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192a:	e003      	b.n	8001934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43d9      	mvns	r1, r3
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e26c      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8087 	beq.w	8001a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001990:	4b92      	ldr	r3, [pc, #584]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	d00c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800199c:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d112      	bne.n	80019ce <HAL_RCC_OscConfig+0x5e>
 80019a8:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d10b      	bne.n	80019ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b6:	4b89      	ldr	r3, [pc, #548]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d06c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x12c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d168      	bne.n	8001a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e246      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x76>
 80019d8:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a7f      	ldr	r2, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e02e      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x98>
 80019ee:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7a      	ldr	r2, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b78      	ldr	r3, [pc, #480]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a77      	ldr	r2, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0xbc>
 8001a12:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a71      	ldr	r2, [pc, #452]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	4b6b      	ldr	r3, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a67      	ldr	r2, [pc, #412]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fcb6 	bl	80013bc <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fcb2 	bl	80013bc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1fa      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe4>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fca2 	bl	80013bc <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fc9e 	bl	80013bc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1e6      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x10c>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
 8001ac2:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1ba      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4939      	ldr	r1, [pc, #228]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fc57 	bl	80013bc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff fc53 	bl	80013bc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e19b      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4927      	ldr	r1, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fc36 	bl	80013bc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fc32 	bl	80013bc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e17a      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03a      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d019      	beq.n	8001bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fc16 	bl	80013bc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc12 	bl	80013bc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e15a      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 fa9a 	bl	80020ec <RCC_Delay>
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fbfc 	bl	80013bc <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fbf8 	bl	80013bc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d908      	bls.n	8001be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e140      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	42420000 	.word	0x42420000
 8001be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b9e      	ldr	r3, [pc, #632]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e9      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a6 	beq.w	8001d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b97      	ldr	r3, [pc, #604]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10d      	bne.n	8001c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a93      	ldr	r2, [pc, #588]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b91      	ldr	r3, [pc, #580]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b8e      	ldr	r3, [pc, #568]	; (8001e68 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fbb9 	bl	80013bc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7ff fbb5 	bl	80013bc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	; 0x64
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0fd      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b81      	ldr	r3, [pc, #516]	; (8001e68 <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x312>
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a7a      	ldr	r2, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	e02d      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x334>
 8001c8a:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a72      	ldr	r2, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	e01c      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x356>
 8001cac:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a6c      	ldr	r2, [pc, #432]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e00b      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a63      	ldr	r2, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d015      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fb69 	bl	80013bc <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff fb65 	bl	80013bc <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0ab      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ee      	beq.n	8001cee <HAL_RCC_OscConfig+0x37e>
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb53 	bl	80013bc <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fb4f 	bl	80013bc <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e095      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8081 	beq.w	8001e5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d061      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d146      	bne.n	8001dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_OscConfig+0x4fc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fb23 	bl	80013bc <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7ff fb1f 	bl	80013bc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e067      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	492d      	ldr	r1, [pc, #180]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a19      	ldr	r1, [r3, #32]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	4927      	ldr	r1, [pc, #156]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x4fc>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff faf3 	bl	80013bc <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff faef 	bl	80013bc <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e037      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x46a>
 8001df8:	e02f      	b.n	8001e5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_RCC_OscConfig+0x4fc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fadc 	bl	80013bc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fad8 	bl	80013bc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e020      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x498>
 8001e26:	e018      	b.n	8001e5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e013      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42420060 	.word	0x42420060

08001e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0d0      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4965      	ldr	r1, [pc, #404]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b8      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d040      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e073      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06b      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4936      	ldr	r1, [pc, #216]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7ff fa2c 	bl	80013bc <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7ff fa28 	bl	80013bc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e053      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d210      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f821 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1cc>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1d0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f98a 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40022000 	.word	0x40022000
 8002034:	40021000 	.word	0x40021000
 8002038:	08002950 	.word	0x08002950
 800203c:	20000010 	.word	0x20000010
 8002040:	20000014 	.word	0x20000014

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x36>
 8002072:	e027      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002076:	613b      	str	r3, [r7, #16]
      break;
 8002078:	e027      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0c5b      	lsrs	r3, r3, #17
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 80020a6:	fb02 f203 	mul.w	r2, r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e004      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	613b      	str	r3, [r7, #16]
      break;
 80020c2:	e002      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	613b      	str	r3, [r7, #16]
      break;
 80020c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ca:	693b      	ldr	r3, [r7, #16]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	007a1200 	.word	0x007a1200
 80020e0:	08002960 	.word	0x08002960
 80020e4:	08002970 	.word	0x08002970
 80020e8:	003d0900 	.word	0x003d0900

080020ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <RCC_Delay+0x34>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <RCC_Delay+0x38>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0a5b      	lsrs	r3, r3, #9
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002108:	bf00      	nop
  }
  while (Delay --);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e5a      	subs	r2, r3, #1
 800210e:	60fa      	str	r2, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <RCC_Delay+0x1c>
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000010 	.word	0x20000010
 8002124:	10624dd3 	.word	0x10624dd3

08002128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e041      	b.n	80021be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff f85a 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f000 fa56 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d001      	beq.n	80021e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e035      	b.n	800224c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_TIM_Base_Start_IT+0x90>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_TIM_Base_Start_IT+0x4e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220a:	d004      	beq.n	8002216 <HAL_TIM_Base_Start_IT+0x4e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_TIM_Base_Start_IT+0x94>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d111      	bne.n	800223a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d010      	beq.n	800224a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002238:	e007      	b.n	800224a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d020      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0202 	mvn.w	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f998 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f98b 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f99a 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d020      	beq.n	8002310 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0204 	mvn.w	r2, #4
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f972 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f965 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f974 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d020      	beq.n	800235c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0208 	mvn.w	r2, #8
 800232c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2204      	movs	r2, #4
 8002332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f94c 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f93f 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f94e 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0210 	mvn.w	r2, #16
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2208      	movs	r2, #8
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f926 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f919 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f928 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0201 	mvn.w	r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fe36 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00c      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa6f 	bl	80028ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800240c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8f8 	bl	8002604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0220 	mvn.w	r2, #32
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa42 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_TIM_ConfigClockSource+0x1c>
 8002458:	2302      	movs	r3, #2
 800245a:	e0b4      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x186>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800247a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002494:	d03e      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0xd4>
 8002496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249a:	f200 8087 	bhi.w	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	f000 8086 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x172>
 80024a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024aa:	d87f      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d01a      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d87b      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b60      	cmp	r3, #96	; 0x60
 80024b6:	d050      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x11a>
 80024b8:	2b60      	cmp	r3, #96	; 0x60
 80024ba:	d877      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b50      	cmp	r3, #80	; 0x50
 80024be:	d03c      	beq.n	800253a <HAL_TIM_ConfigClockSource+0xfa>
 80024c0:	2b50      	cmp	r3, #80	; 0x50
 80024c2:	d873      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d058      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x13a>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d86f      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b30      	cmp	r3, #48	; 0x30
 80024ce:	d064      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b30      	cmp	r3, #48	; 0x30
 80024d2:	d86b      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d060      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d867      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05c      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d05a      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	e062      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f000 f96a 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	609a      	str	r2, [r3, #8]
      break;
 8002512:	e04f      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f000 f953 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002536:	609a      	str	r2, [r3, #8]
      break;
 8002538:	e03c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f000 f8ca 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2150      	movs	r1, #80	; 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f921 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002558:	e02c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	f000 f8e8 	bl	800273c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2160      	movs	r1, #96	; 0x60
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f911 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002578:	e01c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	f000 f8aa 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f901 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002598:	e00c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f000 f8f8 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80025aa:	e003      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e000      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <TIM_Base_SetConfig+0xc0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x28>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x28>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a28      	ldr	r2, [pc, #160]	; (80026dc <TIM_Base_SetConfig+0xc4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <TIM_Base_SetConfig+0xc0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x52>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x52>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <TIM_Base_SetConfig+0xc4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <TIM_Base_SetConfig+0xc0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
  }
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400

080026e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f023 030a 	bic.w	r3, r3, #10
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f023 0210 	bic.w	r2, r3, #16
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	031b      	lsls	r3, r3, #12
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f043 0307 	orr.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e041      	b.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d004      	beq.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10c      	bne.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	2600      	movs	r6, #0
 80028e4:	4d0c      	ldr	r5, [pc, #48]	; (8002918 <__libc_init_array+0x38>)
 80028e6:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	f000 f822 	bl	8002938 <_init>
 80028f4:	2600      	movs	r6, #0
 80028f6:	4d0a      	ldr	r5, [pc, #40]	; (8002920 <__libc_init_array+0x40>)
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <__libc_init_array+0x44>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002974 	.word	0x08002974
 800291c:	08002974 	.word	0x08002974
 8002920:	08002974 	.word	0x08002974
 8002924:	08002978 	.word	0x08002978

08002928 <memset>:
 8002928:	4603      	mov	r3, r0
 800292a:	4402      	add	r2, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
