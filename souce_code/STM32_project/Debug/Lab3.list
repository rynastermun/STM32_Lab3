
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002864  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002994  08002994  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002994  08002994  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000001c  080029b8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080029b8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f65  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016941  00000000  00000000  0002bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abe2  00000000  00000000  00042579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082401  00000000  00000000  0004d15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf55c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000288c  00000000  00000000  000cf5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002958 	.word	0x08002958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002958 	.word	0x08002958

0800014c <initialButton>:
int KeyReg[NUM_OF_BUTTON][4]; // Mảng lưu trạng thái của 3 nút, mỗi nút có 3 trạng thái
int ButtonFlag[NUM_OF_BUTTON] = {0, 0, 0}; // Cờ trạng thái cho 3 nút
int buttonPressDuration = 0; //Biến kiểm tra nhấn giữ
int ButtonHoldFlag[NUM_OF_BUTTON]; //Đánh giấu trạng thái nhấn giữ

void initialButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	//KHỞI TẠO CỜ VÀ TRẠNG THÁI CÁC NÚT
	for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e018      	b.n	800018a <initialButton+0x3e>
	        ButtonFlag[i] = 0;
 8000158:	4a10      	ldr	r2, [pc, #64]	; (800019c <initialButton+0x50>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        for (int j = 0; j < 3; j++) {
 8000162:	2300      	movs	r3, #0
 8000164:	603b      	str	r3, [r7, #0]
 8000166:	e00a      	b.n	800017e <initialButton+0x32>
	            KeyReg[i][j] = NORMAL_STATE;
 8000168:	490d      	ldr	r1, [pc, #52]	; (80001a0 <initialButton+0x54>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	009a      	lsls	r2, r3, #2
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	4413      	add	r3, r2
 8000172:	2201      	movs	r2, #1
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int j = 0; j < 3; j++) {
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	3301      	adds	r3, #1
 800017c:	603b      	str	r3, [r7, #0]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	2b02      	cmp	r3, #2
 8000182:	ddf1      	ble.n	8000168 <initialButton+0x1c>
	for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	3301      	adds	r3, #1
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b02      	cmp	r3, #2
 800018e:	dde3      	ble.n	8000158 <initialButton+0xc>
	        }
	    }
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000038 	.word	0x20000038
 80001a0:	20000080 	.word	0x20000080

080001a4 <isSelectPressed>:

//KIỂM TRA NÚT Select NẾU ĐƯỢC NHẤN
int isSelectPressed() {
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
    if (ButtonFlag[Select] == 1) {
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <isSelectPressed+0x20>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d104      	bne.n	80001ba <isSelectPressed+0x16>
        ButtonFlag[Select] = 0;
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <isSelectPressed+0x20>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
        return 1;
 80001b6:	2301      	movs	r3, #1
 80001b8:	e000      	b.n	80001bc <isSelectPressed+0x18>
    }
    return 0;
 80001ba:	2300      	movs	r3, #0
}
 80001bc:	4618      	mov	r0, r3
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	20000038 	.word	0x20000038

080001c8 <isDurationPressed>:

//KIỂM TRA NÚT Duration NẾU ĐƯỢC NHẤN
int isDurationPressed() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    if (ButtonFlag[Duration] == 1) {
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <isDurationPressed+0x20>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d104      	bne.n	80001de <isDurationPressed+0x16>
        ButtonFlag[Duration] = 0;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <isDurationPressed+0x20>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	605a      	str	r2, [r3, #4]
        return 1;
 80001da:	2301      	movs	r3, #1
 80001dc:	e000      	b.n	80001e0 <isDurationPressed+0x18>
    }
    return 0;
 80001de:	2300      	movs	r3, #0
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	20000038 	.word	0x20000038

080001ec <isSetPressed>:

//KIỂM TRA NÚT Set NẾU ĐƯỢC NHẤN
int isSetPressed() {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    if (ButtonFlag[Set] == 1) {
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <isSetPressed+0x20>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d104      	bne.n	8000202 <isSetPressed+0x16>
        ButtonFlag[Set] = 0;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <isSetPressed+0x20>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
        return 1;
 80001fe:	2301      	movs	r3, #1
 8000200:	e000      	b.n	8000204 <isSetPressed+0x18>
    }
    return 0;
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000038 	.word	0x20000038

08000210 <getKeyInput>:

//ĐỌC TRẠNG THÁI NÚT VÀ XỬ LÝ DEBOUNCE
void getKeyInput() {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e0ac      	b.n	8000376 <getKeyInput+0x166>
        KeyReg[i][0] = KeyReg[i][1];
 800021c:	4a5a      	ldr	r2, [pc, #360]	; (8000388 <getKeyInput+0x178>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	011b      	lsls	r3, r3, #4
 8000222:	4413      	add	r3, r2
 8000224:	3304      	adds	r3, #4
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4957      	ldr	r1, [pc, #348]	; (8000388 <getKeyInput+0x178>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	011b      	lsls	r3, r3, #4
 800022e:	440b      	add	r3, r1
 8000230:	601a      	str	r2, [r3, #0]
        KeyReg[i][1] = KeyReg[i][2];
 8000232:	4a55      	ldr	r2, [pc, #340]	; (8000388 <getKeyInput+0x178>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	4413      	add	r3, r2
 800023a:	3308      	adds	r3, #8
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4952      	ldr	r1, [pc, #328]	; (8000388 <getKeyInput+0x178>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	011b      	lsls	r3, r3, #4
 8000244:	440b      	add	r3, r1
 8000246:	3304      	adds	r3, #4
 8000248:	601a      	str	r2, [r3, #0]

        // Đọc tín hiệu của các nút (thay thế với hàm đọc GPIO thực tế)
        if (i == Select) KeyReg[i][2] = HAL_GPIO_ReadPin(Select_GPIO_Port, Select_Pin);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d10c      	bne.n	800026a <getKeyInput+0x5a>
 8000250:	2110      	movs	r1, #16
 8000252:	484e      	ldr	r0, [pc, #312]	; (800038c <getKeyInput+0x17c>)
 8000254:	f001 fb54 	bl	8001900 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	4619      	mov	r1, r3
 800025c:	4a4a      	ldr	r2, [pc, #296]	; (8000388 <getKeyInput+0x178>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	011b      	lsls	r3, r3, #4
 8000262:	4413      	add	r3, r2
 8000264:	3308      	adds	r3, #8
 8000266:	6019      	str	r1, [r3, #0]
 8000268:	e01e      	b.n	80002a8 <getKeyInput+0x98>
        else if (i == Duration) KeyReg[i][2] = HAL_GPIO_ReadPin(Duration_GPIO_Port, Duration_Pin);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d10c      	bne.n	800028a <getKeyInput+0x7a>
 8000270:	2120      	movs	r1, #32
 8000272:	4846      	ldr	r0, [pc, #280]	; (800038c <getKeyInput+0x17c>)
 8000274:	f001 fb44 	bl	8001900 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	4619      	mov	r1, r3
 800027c:	4a42      	ldr	r2, [pc, #264]	; (8000388 <getKeyInput+0x178>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	011b      	lsls	r3, r3, #4
 8000282:	4413      	add	r3, r2
 8000284:	3308      	adds	r3, #8
 8000286:	6019      	str	r1, [r3, #0]
 8000288:	e00e      	b.n	80002a8 <getKeyInput+0x98>
        else if (i == Set) KeyReg[i][2] = HAL_GPIO_ReadPin(Set_GPIO_Port, Set_Pin);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b02      	cmp	r3, #2
 800028e:	d10b      	bne.n	80002a8 <getKeyInput+0x98>
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	483e      	ldr	r0, [pc, #248]	; (800038c <getKeyInput+0x17c>)
 8000294:	f001 fb34 	bl	8001900 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	4619      	mov	r1, r3
 800029c:	4a3a      	ldr	r2, [pc, #232]	; (8000388 <getKeyInput+0x178>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	4413      	add	r3, r2
 80002a4:	3308      	adds	r3, #8
 80002a6:	6019      	str	r1, [r3, #0]

        // Kiểm tra nếu trạng thái của nút ổn định
        if ((KeyReg[i][0] == KeyReg[i][1]) && (KeyReg[i][1] == KeyReg[i][2])) {
 80002a8:	4a37      	ldr	r2, [pc, #220]	; (8000388 <getKeyInput+0x178>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	011b      	lsls	r3, r3, #4
 80002ae:	4413      	add	r3, r2
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4935      	ldr	r1, [pc, #212]	; (8000388 <getKeyInput+0x178>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	440b      	add	r3, r1
 80002ba:	3304      	adds	r3, #4
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d156      	bne.n	8000370 <getKeyInput+0x160>
 80002c2:	4a31      	ldr	r2, [pc, #196]	; (8000388 <getKeyInput+0x178>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	4413      	add	r3, r2
 80002ca:	3304      	adds	r3, #4
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	492e      	ldr	r1, [pc, #184]	; (8000388 <getKeyInput+0x178>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	440b      	add	r3, r1
 80002d6:	3308      	adds	r3, #8
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d148      	bne.n	8000370 <getKeyInput+0x160>
            if (KeyReg[i][3] != KeyReg[i][2]) { // Kiểm tra nhấn thả
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <getKeyInput+0x178>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	011b      	lsls	r3, r3, #4
 80002e4:	4413      	add	r3, r2
 80002e6:	330c      	adds	r3, #12
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4927      	ldr	r1, [pc, #156]	; (8000388 <getKeyInput+0x178>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	011b      	lsls	r3, r3, #4
 80002f0:	440b      	add	r3, r1
 80002f2:	3308      	adds	r3, #8
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d021      	beq.n	800033e <getKeyInput+0x12e>
                KeyReg[i][3] = KeyReg[i][2]; // Cập nhật trạng thái cũ
 80002fa:	4a23      	ldr	r2, [pc, #140]	; (8000388 <getKeyInput+0x178>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	4413      	add	r3, r2
 8000302:	3308      	adds	r3, #8
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4920      	ldr	r1, [pc, #128]	; (8000388 <getKeyInput+0x178>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	011b      	lsls	r3, r3, #4
 800030c:	440b      	add	r3, r1
 800030e:	330c      	adds	r3, #12
 8000310:	601a      	str	r2, [r3, #0]

                if (KeyReg[i][2] == PRESSED_STATE) {
 8000312:	4a1d      	ldr	r2, [pc, #116]	; (8000388 <getKeyInput+0x178>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	011b      	lsls	r3, r3, #4
 8000318:	4413      	add	r3, r2
 800031a:	3308      	adds	r3, #8
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d126      	bne.n	8000370 <getKeyInput+0x160>
                    ButtonFlag[i] = 1; // Đánh dấu nút được nhấn
 8000322:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <getKeyInput+0x180>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2101      	movs	r1, #1
 8000328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonHoldFlag[i] = 0; //Reset trạng thái nhấn giữ
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <getKeyInput+0x184>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2100      	movs	r1, #0
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    buttonPressDuration = 0; // Reset thời gian nhấn giữ khi nhấn lần đầu
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <getKeyInput+0x188>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	e018      	b.n	8000370 <getKeyInput+0x160>
                }
            }
            else { // Nếu nút không thay đổi (nhấn giữ)
            	if (KeyReg[i][2] == PRESSED_STATE) {
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <getKeyInput+0x178>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	3308      	adds	r3, #8
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d110      	bne.n	8000370 <getKeyInput+0x160>
            		buttonPressDuration++; // Tăng thời gian nhấn giữ
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <getKeyInput+0x188>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a10      	ldr	r2, [pc, #64]	; (8000398 <getKeyInput+0x188>)
 8000356:	6013      	str	r3, [r2, #0]

            		if (buttonPressDuration >= LONG_PRESS) { // Kiểm tra nếu thời gian nhấn giữ đã đạt LONG_PRESS
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <getKeyInput+0x188>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2bc7      	cmp	r3, #199	; 0xc7
 800035e:	dd07      	ble.n	8000370 <getKeyInput+0x160>
            			ButtonHoldFlag[i] = 1;//Đánh giấu trạng thái nhấn giữ
 8000360:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <getKeyInput+0x184>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2101      	movs	r1, #1
 8000366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            			buttonPressDuration = 0;//Reset bộ đếm
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <getKeyInput+0x188>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_OF_BUTTON; i++) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3301      	adds	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b02      	cmp	r3, #2
 800037a:	f77f af4f 	ble.w	800021c <getKeyInput+0xc>
            		}
                }
            }
        }
    }
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000080 	.word	0x20000080
 800038c:	40010c00 	.word	0x40010c00
 8000390:	20000038 	.word	0x20000038
 8000394:	20000074 	.word	0x20000074
 8000398:	20000044 	.word	0x20000044

0800039c <fsm_processing>:
//Biến đệm để lưu thời gian thay đổi khi nhấn Duration
int timeRedTemp;
int timeGreenTemp;
int timeAmberTemp;

void fsm_processing(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	//Tăng Mode khi nút Mode được nhấn
	switch(MODE){
 80003a0:	4b99      	ldr	r3, [pc, #612]	; (8000608 <fsm_processing+0x26c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b04      	cmp	r3, #4
 80003a6:	f200 8293 	bhi.w	80008d0 <fsm_processing+0x534>
 80003aa:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <fsm_processing+0x14>)
 80003ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b0:	080003c5 	.word	0x080003c5
 80003b4:	0800045d 	.word	0x0800045d
 80003b8:	08000645 	.word	0x08000645
 80003bc:	08000703 	.word	0x08000703
 80003c0:	080007c3 	.word	0x080007c3
	case STATE_INIT:
		if (timer3_flag == 1){
 80003c4:	4b91      	ldr	r3, [pc, #580]	; (800060c <fsm_processing+0x270>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d104      	bne.n	80003d6 <fsm_processing+0x3a>
			//Đọc trạng thái nút và xử lý debounce
			getKeyInput();
 80003cc:	f7ff ff20 	bl	8000210 <getKeyInput>
			setTimer3(10);
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fe8d 	bl	80010f0 <setTimer3>
		}
		//Khi nhấn nút thì chuyển sang Mode 1
		if (isSelectPressed() == 1){
 80003d6:	f7ff fee5 	bl	80001a4 <isSelectPressed>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d118      	bne.n	8000412 <fsm_processing+0x76>
			MODE = MODE1;
 80003e0:	4b89      	ldr	r3, [pc, #548]	; (8000608 <fsm_processing+0x26c>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
			Index = 0;
 80003e6:	4b8a      	ldr	r3, [pc, #552]	; (8000610 <fsm_processing+0x274>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
			led_off(RED0);
 80003ec:	2008      	movs	r0, #8
 80003ee:	f000 fcef 	bl	8000dd0 <led_off>
			led_off(RED1);
 80003f2:	2040      	movs	r0, #64	; 0x40
 80003f4:	f000 fcec 	bl	8000dd0 <led_off>
			led_off(AMBER0);
 80003f8:	2004      	movs	r0, #4
 80003fa:	f000 fce9 	bl	8000dd0 <led_off>
			led_off(AMBER1);
 80003fe:	2020      	movs	r0, #32
 8000400:	f000 fce6 	bl	8000dd0 <led_off>
			led_off(GREEN0);
 8000404:	2002      	movs	r0, #2
 8000406:	f000 fce3 	bl	8000dd0 <led_off>
			led_off(GREEN1);
 800040a:	2010      	movs	r0, #16
 800040c:	f000 fce0 	bl	8000dd0 <led_off>
			break;
 8000410:	e269      	b.n	80008e6 <fsm_processing+0x54a>
		}
		//Hiển thị số 8 trên 4 led 7 đoạn
		valueSEG12 = 88;
 8000412:	4b80      	ldr	r3, [pc, #512]	; (8000614 <fsm_processing+0x278>)
 8000414:	2258      	movs	r2, #88	; 0x58
 8000416:	601a      	str	r2, [r3, #0]
		valueSEG34 = 88;
 8000418:	4b7f      	ldr	r3, [pc, #508]	; (8000618 <fsm_processing+0x27c>)
 800041a:	2258      	movs	r2, #88	; 0x58
 800041c:	601a      	str	r2, [r3, #0]

		//Hiển thị tất cả led
		if (timer1_flag == 1){
 800041e:	4b7f      	ldr	r3, [pc, #508]	; (800061c <fsm_processing+0x280>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	f040 8256 	bne.w	80008d4 <fsm_processing+0x538>
			if (Index > 3) Index = 0;
 8000428:	4b79      	ldr	r3, [pc, #484]	; (8000610 <fsm_processing+0x274>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b03      	cmp	r3, #3
 800042e:	dd02      	ble.n	8000436 <fsm_processing+0x9a>
 8000430:	4b77      	ldr	r3, [pc, #476]	; (8000610 <fsm_processing+0x274>)
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000436:	4b76      	ldr	r3, [pc, #472]	; (8000610 <fsm_processing+0x274>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	4974      	ldr	r1, [pc, #464]	; (8000610 <fsm_processing+0x274>)
 800043e:	600a      	str	r2, [r1, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fc31 	bl	8000ca8 <update7SEG>
			setTimer1(500);
 8000446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800044a:	f000 fe19 	bl	8001080 <setTimer1>
			blink_red();
 800044e:	f000 fcd1 	bl	8000df4 <blink_red>
			blink_amber();
 8000452:	f000 fcdd 	bl	8000e10 <blink_amber>
			blink_green();
 8000456:	f000 fce9 	bl	8000e2c <blink_green>
		}
		break;
 800045a:	e23b      	b.n	80008d4 <fsm_processing+0x538>

	case MODE1:
		if (timer3_flag == 1){
 800045c:	4b6b      	ldr	r3, [pc, #428]	; (800060c <fsm_processing+0x270>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d104      	bne.n	800046e <fsm_processing+0xd2>
			//Đọc trạng thái nút và xử lý debounce
			getKeyInput();
 8000464:	f7ff fed4 	bl	8000210 <getKeyInput>
			setTimer3(10);
 8000468:	200a      	movs	r0, #10
 800046a:	f000 fe41 	bl	80010f0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 2
		if (isSelectPressed() == 1){
 800046e:	f7ff fe99 	bl	80001a4 <isSelectPressed>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d110      	bne.n	800049a <fsm_processing+0xfe>
			MODE = MODE2;
 8000478:	4b63      	ldr	r3, [pc, #396]	; (8000608 <fsm_processing+0x26c>)
 800047a:	2202      	movs	r2, #2
 800047c:	701a      	strb	r2, [r3, #0]
			timeRedTemp = redTime;
 800047e:	4b68      	ldr	r3, [pc, #416]	; (8000620 <fsm_processing+0x284>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a68      	ldr	r2, [pc, #416]	; (8000624 <fsm_processing+0x288>)
 8000484:	6013      	str	r3, [r2, #0]
			led_off(RED0);
 8000486:	2008      	movs	r0, #8
 8000488:	f000 fca2 	bl	8000dd0 <led_off>
			led_off(RED1);
 800048c:	2040      	movs	r0, #64	; 0x40
 800048e:	f000 fc9f 	bl	8000dd0 <led_off>
			Index = 0;
 8000492:	4b5f      	ldr	r3, [pc, #380]	; (8000610 <fsm_processing+0x274>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
			break;
 8000498:	e225      	b.n	80008e6 <fsm_processing+0x54a>
		}
		if(timer2_flag == 1){ //Led giao thông và cập nhật led 7 đoạn
 800049a:	4b63      	ldr	r3, [pc, #396]	; (8000628 <fsm_processing+0x28c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 809a 	bne.w	80005d8 <fsm_processing+0x23c>

			//Led trên dưới
			if(count1 == 0){
 80004a4:	4b61      	ldr	r3, [pc, #388]	; (800062c <fsm_processing+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d13d      	bne.n	8000528 <fsm_processing+0x18c>
				if(status1 == 0){//Led đỏ
 80004ac:	4b60      	ldr	r3, [pc, #384]	; (8000630 <fsm_processing+0x294>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d110      	bne.n	80004d6 <fsm_processing+0x13a>
					led_on(RED0);
 80004b4:	2008      	movs	r0, #8
 80004b6:	f000 fc79 	bl	8000dac <led_on>
					led_off(AMBER0);
 80004ba:	2004      	movs	r0, #4
 80004bc:	f000 fc88 	bl	8000dd0 <led_off>
					led_off(GREEN0);
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 fc85 	bl	8000dd0 <led_off>
					status1 = 2;
 80004c6:	4b5a      	ldr	r3, [pc, #360]	; (8000630 <fsm_processing+0x294>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	601a      	str	r2, [r3, #0]
					count1 = redTime;
 80004cc:	4b54      	ldr	r3, [pc, #336]	; (8000620 <fsm_processing+0x284>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a56      	ldr	r2, [pc, #344]	; (800062c <fsm_processing+0x290>)
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	e028      	b.n	8000528 <fsm_processing+0x18c>
				}
				else if(status1 == 1){//Led vàng
 80004d6:	4b56      	ldr	r3, [pc, #344]	; (8000630 <fsm_processing+0x294>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d110      	bne.n	8000500 <fsm_processing+0x164>
					led_off(RED0);
 80004de:	2008      	movs	r0, #8
 80004e0:	f000 fc76 	bl	8000dd0 <led_off>
					led_on(AMBER0);
 80004e4:	2004      	movs	r0, #4
 80004e6:	f000 fc61 	bl	8000dac <led_on>
					led_off(GREEN0);
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 fc70 	bl	8000dd0 <led_off>
					status1 = 0;
 80004f0:	4b4f      	ldr	r3, [pc, #316]	; (8000630 <fsm_processing+0x294>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
					count1 = amberTime;
 80004f6:	4b4f      	ldr	r3, [pc, #316]	; (8000634 <fsm_processing+0x298>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a4c      	ldr	r2, [pc, #304]	; (800062c <fsm_processing+0x290>)
 80004fc:	6013      	str	r3, [r2, #0]
 80004fe:	e013      	b.n	8000528 <fsm_processing+0x18c>
				}
				else if(status1 == 2){//Led xanh
 8000500:	4b4b      	ldr	r3, [pc, #300]	; (8000630 <fsm_processing+0x294>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d10f      	bne.n	8000528 <fsm_processing+0x18c>
					led_off(RED0);
 8000508:	2008      	movs	r0, #8
 800050a:	f000 fc61 	bl	8000dd0 <led_off>
					led_off(AMBER0);
 800050e:	2004      	movs	r0, #4
 8000510:	f000 fc5e 	bl	8000dd0 <led_off>
					led_on(GREEN0);
 8000514:	2002      	movs	r0, #2
 8000516:	f000 fc49 	bl	8000dac <led_on>
					status1 = 1;
 800051a:	4b45      	ldr	r3, [pc, #276]	; (8000630 <fsm_processing+0x294>)
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]
					count1 = greenTime;
 8000520:	4b45      	ldr	r3, [pc, #276]	; (8000638 <fsm_processing+0x29c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a41      	ldr	r2, [pc, #260]	; (800062c <fsm_processing+0x290>)
 8000526:	6013      	str	r3, [r2, #0]
				}
			}

			//Led trái phải
			if(count2 == 0){
 8000528:	4b44      	ldr	r3, [pc, #272]	; (800063c <fsm_processing+0x2a0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d13d      	bne.n	80005ac <fsm_processing+0x210>
				if(status2 == 0){//Led đỏ
 8000530:	4b43      	ldr	r3, [pc, #268]	; (8000640 <fsm_processing+0x2a4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d110      	bne.n	800055a <fsm_processing+0x1be>
					led_on(RED1);
 8000538:	2040      	movs	r0, #64	; 0x40
 800053a:	f000 fc37 	bl	8000dac <led_on>
					led_off(AMBER1);
 800053e:	2020      	movs	r0, #32
 8000540:	f000 fc46 	bl	8000dd0 <led_off>
					led_off(GREEN1);
 8000544:	2010      	movs	r0, #16
 8000546:	f000 fc43 	bl	8000dd0 <led_off>
					status2 = 2;
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <fsm_processing+0x2a4>)
 800054c:	2202      	movs	r2, #2
 800054e:	601a      	str	r2, [r3, #0]
					count2 = redTime;
 8000550:	4b33      	ldr	r3, [pc, #204]	; (8000620 <fsm_processing+0x284>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a39      	ldr	r2, [pc, #228]	; (800063c <fsm_processing+0x2a0>)
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	e028      	b.n	80005ac <fsm_processing+0x210>
				}
				else if(status2 == 1){//Led vàng
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <fsm_processing+0x2a4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d110      	bne.n	8000584 <fsm_processing+0x1e8>
					led_off(RED1);
 8000562:	2040      	movs	r0, #64	; 0x40
 8000564:	f000 fc34 	bl	8000dd0 <led_off>
					led_on(AMBER1);
 8000568:	2020      	movs	r0, #32
 800056a:	f000 fc1f 	bl	8000dac <led_on>
					led_off(GREEN1);
 800056e:	2010      	movs	r0, #16
 8000570:	f000 fc2e 	bl	8000dd0 <led_off>
					status2 = 0;
 8000574:	4b32      	ldr	r3, [pc, #200]	; (8000640 <fsm_processing+0x2a4>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
					count2 = amberTime;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <fsm_processing+0x298>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2f      	ldr	r2, [pc, #188]	; (800063c <fsm_processing+0x2a0>)
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e013      	b.n	80005ac <fsm_processing+0x210>
				}
				else if(status2 == 2){//Led xanh
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <fsm_processing+0x2a4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d10f      	bne.n	80005ac <fsm_processing+0x210>
					led_off(RED1);
 800058c:	2040      	movs	r0, #64	; 0x40
 800058e:	f000 fc1f 	bl	8000dd0 <led_off>
					led_off(AMBER1);
 8000592:	2020      	movs	r0, #32
 8000594:	f000 fc1c 	bl	8000dd0 <led_off>
					led_on(GREEN1);
 8000598:	2010      	movs	r0, #16
 800059a:	f000 fc07 	bl	8000dac <led_on>
					status2 = 1;
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <fsm_processing+0x2a4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
					count2 = greenTime;
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <fsm_processing+0x29c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a24      	ldr	r2, [pc, #144]	; (800063c <fsm_processing+0x2a0>)
 80005aa:	6013      	str	r3, [r2, #0]
				}
			}
			count1--;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <fsm_processing+0x290>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <fsm_processing+0x290>)
 80005b4:	6013      	str	r3, [r2, #0]
			count2--;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <fsm_processing+0x2a0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a1f      	ldr	r2, [pc, #124]	; (800063c <fsm_processing+0x2a0>)
 80005be:	6013      	str	r3, [r2, #0]
			valueSEG12 = count1;//Hiển thị đếm ngược led trên dưới
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <fsm_processing+0x290>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <fsm_processing+0x278>)
 80005c6:	6013      	str	r3, [r2, #0]
			valueSEG34 = count2;//Hiển thị đếm ngược led trái phải
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <fsm_processing+0x2a0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <fsm_processing+0x27c>)
 80005ce:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fd70 	bl	80010b8 <setTimer2>
		}
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <fsm_processing+0x280>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	f040 817b 	bne.w	80008d8 <fsm_processing+0x53c>
			if(Index > 3) Index = 0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <fsm_processing+0x274>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	dd02      	ble.n	80005f0 <fsm_processing+0x254>
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <fsm_processing+0x274>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <fsm_processing+0x274>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	4906      	ldr	r1, [pc, #24]	; (8000610 <fsm_processing+0x274>)
 80005f8:	600a      	str	r2, [r1, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb54 	bl	8000ca8 <update7SEG>
			setTimer1(200);
 8000600:	20c8      	movs	r0, #200	; 0xc8
 8000602:	f000 fd3d 	bl	8001080 <setTimer1>
		}
		break;
 8000606:	e167      	b.n	80008d8 <fsm_processing+0x53c>
 8000608:	20000048 	.word	0x20000048
 800060c:	20000070 	.word	0x20000070
 8000610:	20000058 	.word	0x20000058
 8000614:	200000c0 	.word	0x200000c0
 8000618:	200000bc 	.word	0x200000bc
 800061c:	20000060 	.word	0x20000060
 8000620:	20000004 	.word	0x20000004
 8000624:	200000b8 	.word	0x200000b8
 8000628:	20000068 	.word	0x20000068
 800062c:	20000050 	.word	0x20000050
 8000630:	2000004c 	.word	0x2000004c
 8000634:	20000008 	.word	0x20000008
 8000638:	2000000c 	.word	0x2000000c
 800063c:	20000054 	.word	0x20000054
 8000640:	20000000 	.word	0x20000000

	case MODE2:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 8000644:	4ba9      	ldr	r3, [pc, #676]	; (80008ec <fsm_processing+0x550>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d104      	bne.n	8000656 <fsm_processing+0x2ba>
			getKeyInput();
 800064c:	f7ff fde0 	bl	8000210 <getKeyInput>
			setTimer3(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fd4d 	bl	80010f0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 3
		if(isSelectPressed() == 1){
 8000656:	f7ff fda5 	bl	80001a4 <isSelectPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d109      	bne.n	8000674 <fsm_processing+0x2d8>
			MODE = MODE3;
 8000660:	4ba3      	ldr	r3, [pc, #652]	; (80008f0 <fsm_processing+0x554>)
 8000662:	2203      	movs	r2, #3
 8000664:	701a      	strb	r2, [r3, #0]
			timeAmberTemp = amberTime;
 8000666:	4ba3      	ldr	r3, [pc, #652]	; (80008f4 <fsm_processing+0x558>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4aa3      	ldr	r2, [pc, #652]	; (80008f8 <fsm_processing+0x55c>)
 800066c:	6013      	str	r3, [r2, #0]
			Index = 0;
 800066e:	4ba3      	ldr	r3, [pc, #652]	; (80008fc <fsm_processing+0x560>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led đỏ
		if(isDurationPressed() == 1){
 8000674:	f7ff fda8 	bl	80001c8 <isDurationPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10b      	bne.n	8000696 <fsm_processing+0x2fa>
			timeRedTemp++;
 800067e:	4ba0      	ldr	r3, [pc, #640]	; (8000900 <fsm_processing+0x564>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a9e      	ldr	r2, [pc, #632]	; (8000900 <fsm_processing+0x564>)
 8000686:	6013      	str	r3, [r2, #0]
			if(timeRedTemp >= 100) timeRedTemp = 1;
 8000688:	4b9d      	ldr	r3, [pc, #628]	; (8000900 <fsm_processing+0x564>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b63      	cmp	r3, #99	; 0x63
 800068e:	dd02      	ble.n	8000696 <fsm_processing+0x2fa>
 8000690:	4b9b      	ldr	r3, [pc, #620]	; (8000900 <fsm_processing+0x564>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 8000696:	f7ff fda9 	bl	80001ec <isSetPressed>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d103      	bne.n	80006a8 <fsm_processing+0x30c>
			redTime = timeRedTemp;
 80006a0:	4b97      	ldr	r3, [pc, #604]	; (8000900 <fsm_processing+0x564>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a97      	ldr	r2, [pc, #604]	; (8000904 <fsm_processing+0x568>)
 80006a6:	6013      	str	r3, [r2, #0]
		}
		led_off(GREEN0);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 fb91 	bl	8000dd0 <led_off>
		led_off(GREEN1);
 80006ae:	2010      	movs	r0, #16
 80006b0:	f000 fb8e 	bl	8000dd0 <led_off>
		led_off(AMBER0);
 80006b4:	2004      	movs	r0, #4
 80006b6:	f000 fb8b 	bl	8000dd0 <led_off>
		led_off(AMBER1);
 80006ba:	2020      	movs	r0, #32
 80006bc:	f000 fb88 	bl	8000dd0 <led_off>
		valueSEG12 = 2;
 80006c0:	4b91      	ldr	r3, [pc, #580]	; (8000908 <fsm_processing+0x56c>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeRedTemp;
 80006c6:	4b8e      	ldr	r3, [pc, #568]	; (8000900 <fsm_processing+0x564>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a90      	ldr	r2, [pc, #576]	; (800090c <fsm_processing+0x570>)
 80006cc:	6013      	str	r3, [r2, #0]
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 80006ce:	4b90      	ldr	r3, [pc, #576]	; (8000910 <fsm_processing+0x574>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	f040 8102 	bne.w	80008dc <fsm_processing+0x540>
			if(Index > 3) Index = 0;
 80006d8:	4b88      	ldr	r3, [pc, #544]	; (80008fc <fsm_processing+0x560>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	dd02      	ble.n	80006e6 <fsm_processing+0x34a>
 80006e0:	4b86      	ldr	r3, [pc, #536]	; (80008fc <fsm_processing+0x560>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80006e6:	4b85      	ldr	r3, [pc, #532]	; (80008fc <fsm_processing+0x560>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	4983      	ldr	r1, [pc, #524]	; (80008fc <fsm_processing+0x560>)
 80006ee:	600a      	str	r2, [r1, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fad9 	bl	8000ca8 <update7SEG>
			setTimer1(200);
 80006f6:	20c8      	movs	r0, #200	; 0xc8
 80006f8:	f000 fcc2 	bl	8001080 <setTimer1>
			blink_red();
 80006fc:	f000 fb7a 	bl	8000df4 <blink_red>
		}
		break;
 8000700:	e0ec      	b.n	80008dc <fsm_processing+0x540>

	case MODE3:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 8000702:	4b7a      	ldr	r3, [pc, #488]	; (80008ec <fsm_processing+0x550>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d104      	bne.n	8000714 <fsm_processing+0x378>
			getKeyInput();
 800070a:	f7ff fd81 	bl	8000210 <getKeyInput>
			setTimer3(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 fcee 	bl	80010f0 <setTimer3>
		}
		//Khi nhấn nút Mode thì chuyển sang Mode 4
		if(isSelectPressed() == 1){
 8000714:	f7ff fd46 	bl	80001a4 <isSelectPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10a      	bne.n	8000734 <fsm_processing+0x398>
			MODE = MODE4;
 800071e:	4b74      	ldr	r3, [pc, #464]	; (80008f0 <fsm_processing+0x554>)
 8000720:	2204      	movs	r2, #4
 8000722:	701a      	strb	r2, [r3, #0]
			timeGreenTemp = greenTime;
 8000724:	4b7b      	ldr	r3, [pc, #492]	; (8000914 <fsm_processing+0x578>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a7b      	ldr	r2, [pc, #492]	; (8000918 <fsm_processing+0x57c>)
 800072a:	6013      	str	r3, [r2, #0]
			Index = 0;
 800072c:	4b73      	ldr	r3, [pc, #460]	; (80008fc <fsm_processing+0x560>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
			break;
 8000732:	e0d8      	b.n	80008e6 <fsm_processing+0x54a>
		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led vàng
		if(isDurationPressed() == 1){
 8000734:	f7ff fd48 	bl	80001c8 <isDurationPressed>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d10b      	bne.n	8000756 <fsm_processing+0x3ba>
			timeAmberTemp++;
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <fsm_processing+0x55c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <fsm_processing+0x55c>)
 8000746:	6013      	str	r3, [r2, #0]
			if(timeAmberTemp >= 100) timeAmberTemp = 1;
 8000748:	4b6b      	ldr	r3, [pc, #428]	; (80008f8 <fsm_processing+0x55c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	dd02      	ble.n	8000756 <fsm_processing+0x3ba>
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <fsm_processing+0x55c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 8000756:	f7ff fd49 	bl	80001ec <isSetPressed>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d103      	bne.n	8000768 <fsm_processing+0x3cc>
			amberTime = timeAmberTemp;
 8000760:	4b65      	ldr	r3, [pc, #404]	; (80008f8 <fsm_processing+0x55c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <fsm_processing+0x558>)
 8000766:	6013      	str	r3, [r2, #0]
		}
		led_off(RED0);
 8000768:	2008      	movs	r0, #8
 800076a:	f000 fb31 	bl	8000dd0 <led_off>
		led_off(RED1);
 800076e:	2040      	movs	r0, #64	; 0x40
 8000770:	f000 fb2e 	bl	8000dd0 <led_off>
		led_off(GREEN0);
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fb2b 	bl	8000dd0 <led_off>
		led_off(GREEN1);
 800077a:	2010      	movs	r0, #16
 800077c:	f000 fb28 	bl	8000dd0 <led_off>
		valueSEG12 = 3;
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <fsm_processing+0x56c>)
 8000782:	2203      	movs	r2, #3
 8000784:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeAmberTemp;
 8000786:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <fsm_processing+0x55c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a60      	ldr	r2, [pc, #384]	; (800090c <fsm_processing+0x570>)
 800078c:	6013      	str	r3, [r2, #0]
		if(timer1_flag == 1){//Hiển thị led 7 đoạn
 800078e:	4b60      	ldr	r3, [pc, #384]	; (8000910 <fsm_processing+0x574>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	f040 80a4 	bne.w	80008e0 <fsm_processing+0x544>
			if(Index > 3) Index = 0;
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <fsm_processing+0x560>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	dd02      	ble.n	80007a6 <fsm_processing+0x40a>
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <fsm_processing+0x560>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <fsm_processing+0x560>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	4953      	ldr	r1, [pc, #332]	; (80008fc <fsm_processing+0x560>)
 80007ae:	600a      	str	r2, [r1, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fa79 	bl	8000ca8 <update7SEG>
			setTimer1(200);
 80007b6:	20c8      	movs	r0, #200	; 0xc8
 80007b8:	f000 fc62 	bl	8001080 <setTimer1>
			blink_amber();
 80007bc:	f000 fb28 	bl	8000e10 <blink_amber>
		}
		break;
 80007c0:	e08e      	b.n	80008e0 <fsm_processing+0x544>

	case MODE4:
		//Đọc trạng thái nút và xử lý debounce
		if(timer3_flag == 1){
 80007c2:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <fsm_processing+0x550>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d104      	bne.n	80007d4 <fsm_processing+0x438>
			getKeyInput();
 80007ca:	f7ff fd21 	bl	8000210 <getKeyInput>
			setTimer3(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f000 fc8e 	bl	80010f0 <setTimer3>
		}

		//Khi nhấn nút Select sẽ xảy ra 2 trường hợp
		if(isSelectPressed() == 1){
 80007d4:	f7ff fce6 	bl	80001a4 <isSelectPressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d132      	bne.n	8000844 <fsm_processing+0x4a8>
			//Nếu thời gian đèn đỏ bằng thời gian đèn xanh + thời gian đèn vàng sẽ trả về Normal Mode
			if(redTime == greenTime + amberTime){
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <fsm_processing+0x578>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <fsm_processing+0x558>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	441a      	add	r2, r3
 80007e8:	4b46      	ldr	r3, [pc, #280]	; (8000904 <fsm_processing+0x568>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d118      	bne.n	8000822 <fsm_processing+0x486>
				MODE = MODE1;
 80007f0:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <fsm_processing+0x554>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
				Index = 0;
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <fsm_processing+0x560>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
				led_off(RED0);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f000 fae7 	bl	8000dd0 <led_off>
				led_off(RED1);
 8000802:	2040      	movs	r0, #64	; 0x40
 8000804:	f000 fae4 	bl	8000dd0 <led_off>
				led_off(AMBER0);
 8000808:	2004      	movs	r0, #4
 800080a:	f000 fae1 	bl	8000dd0 <led_off>
				led_off(AMBER1);
 800080e:	2020      	movs	r0, #32
 8000810:	f000 fade 	bl	8000dd0 <led_off>
				led_off(GREEN0);
 8000814:	2002      	movs	r0, #2
 8000816:	f000 fadb 	bl	8000dd0 <led_off>
				led_off(GREEN1);
 800081a:	2010      	movs	r0, #16
 800081c:	f000 fad8 	bl	8000dd0 <led_off>
				break;
 8000820:	e061      	b.n	80008e6 <fsm_processing+0x54a>
			}
			//Nếu không sẽ trả về Mode 2
			else{
				MODE = MODE2;
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <fsm_processing+0x554>)
 8000824:	2202      	movs	r2, #2
 8000826:	701a      	strb	r2, [r3, #0]
				timeRedTemp = redTime;
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <fsm_processing+0x568>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a34      	ldr	r2, [pc, #208]	; (8000900 <fsm_processing+0x564>)
 800082e:	6013      	str	r3, [r2, #0]
				led_off(RED0);
 8000830:	2008      	movs	r0, #8
 8000832:	f000 facd 	bl	8000dd0 <led_off>
				led_off(RED1);
 8000836:	2040      	movs	r0, #64	; 0x40
 8000838:	f000 faca 	bl	8000dd0 <led_off>
				Index = 0;
 800083c:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <fsm_processing+0x560>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
				break;
 8000842:	e050      	b.n	80008e6 <fsm_processing+0x54a>
//		//Khi nhấn nút Select sẽ chuyển về STATE_INIT
//		if(isSelectPressed() == 1){
//			MODE = STATE_INIT;
//		}
		//Khi nhấn nút Duration sẽ cộng thời gian cho led xanh
		if(isDurationPressed() == 1){
 8000844:	f7ff fcc0 	bl	80001c8 <isDurationPressed>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <fsm_processing+0x4ca>
			timeGreenTemp++;
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <fsm_processing+0x57c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a30      	ldr	r2, [pc, #192]	; (8000918 <fsm_processing+0x57c>)
 8000856:	6013      	str	r3, [r2, #0]
			if(timeGreenTemp >= 100) timeGreenTemp = 1;
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <fsm_processing+0x57c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	dd02      	ble.n	8000866 <fsm_processing+0x4ca>
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <fsm_processing+0x57c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
		}
		//Khi nhấn nút Set sẽ cài đặt đặt giá trị thời gian đã chọn
		if(isSetPressed() == 1){
 8000866:	f7ff fcc1 	bl	80001ec <isSetPressed>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	d103      	bne.n	8000878 <fsm_processing+0x4dc>
			greenTime = timeGreenTemp;
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <fsm_processing+0x57c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <fsm_processing+0x578>)
 8000876:	6013      	str	r3, [r2, #0]
		}
		led_off(RED0);
 8000878:	2008      	movs	r0, #8
 800087a:	f000 faa9 	bl	8000dd0 <led_off>
		led_off(RED1);
 800087e:	2040      	movs	r0, #64	; 0x40
 8000880:	f000 faa6 	bl	8000dd0 <led_off>
		led_off(AMBER0);
 8000884:	2004      	movs	r0, #4
 8000886:	f000 faa3 	bl	8000dd0 <led_off>
		led_off(AMBER1);
 800088a:	2020      	movs	r0, #32
 800088c:	f000 faa0 	bl	8000dd0 <led_off>
		valueSEG12 = 4;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <fsm_processing+0x56c>)
 8000892:	2204      	movs	r2, #4
 8000894:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeGreenTemp;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <fsm_processing+0x57c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <fsm_processing+0x570>)
 800089c:	6013      	str	r3, [r2, #0]
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <fsm_processing+0x574>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d11e      	bne.n	80008e4 <fsm_processing+0x548>
		{
			if (Index > 3) Index = 0;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <fsm_processing+0x560>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dd02      	ble.n	80008b4 <fsm_processing+0x518>
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <fsm_processing+0x560>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <fsm_processing+0x560>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	4910      	ldr	r1, [pc, #64]	; (80008fc <fsm_processing+0x560>)
 80008bc:	600a      	str	r2, [r1, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f9f2 	bl	8000ca8 <update7SEG>
			setTimer1(200);
 80008c4:	20c8      	movs	r0, #200	; 0xc8
 80008c6:	f000 fbdb 	bl	8001080 <setTimer1>
			blink_green();
 80008ca:	f000 faaf 	bl	8000e2c <blink_green>
		}
		break;
 80008ce:	e009      	b.n	80008e4 <fsm_processing+0x548>

	default:
		break;
 80008d0:	bf00      	nop
 80008d2:	e008      	b.n	80008e6 <fsm_processing+0x54a>
		break;
 80008d4:	bf00      	nop
 80008d6:	e006      	b.n	80008e6 <fsm_processing+0x54a>
		break;
 80008d8:	bf00      	nop
 80008da:	e004      	b.n	80008e6 <fsm_processing+0x54a>
		break;
 80008dc:	bf00      	nop
 80008de:	e002      	b.n	80008e6 <fsm_processing+0x54a>
		break;
 80008e0:	bf00      	nop
 80008e2:	e000      	b.n	80008e6 <fsm_processing+0x54a>
		break;
 80008e4:	bf00      	nop
	}
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000070 	.word	0x20000070
 80008f0:	20000048 	.word	0x20000048
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000b4 	.word	0x200000b4
 80008fc:	20000058 	.word	0x20000058
 8000900:	200000b8 	.word	0x200000b8
 8000904:	20000004 	.word	0x20000004
 8000908:	200000c0 	.word	0x200000c0
 800090c:	200000bc 	.word	0x200000bc
 8000910:	20000060 	.word	0x20000060
 8000914:	2000000c 	.word	0x2000000c
 8000918:	200000b0 	.word	0x200000b0

0800091c <display7SEG>:
 */

#include "led.h"

//số hiển thị trên led 7 đoạn
void display7SEG(int num){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d128      	bne.n	800097c <display7SEG+0x60>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	48d2      	ldr	r0, [pc, #840]	; (8000c78 <display7SEG+0x35c>)
 8000930:	f000 fffd 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	48cf      	ldr	r0, [pc, #828]	; (8000c78 <display7SEG+0x35c>)
 800093c:	f000 fff7 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	48cc      	ldr	r0, [pc, #816]	; (8000c78 <display7SEG+0x35c>)
 8000948:	f000 fff1 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	48c9      	ldr	r0, [pc, #804]	; (8000c78 <display7SEG+0x35c>)
 8000954:	f000 ffeb 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095e:	48c6      	ldr	r0, [pc, #792]	; (8000c78 <display7SEG+0x35c>)
 8000960:	f000 ffe5 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	48c3      	ldr	r0, [pc, #780]	; (8000c78 <display7SEG+0x35c>)
 800096c:	f000 ffdf 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000976:	48c0      	ldr	r0, [pc, #768]	; (8000c78 <display7SEG+0x35c>)
 8000978:	f000 ffd9 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 1){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d128      	bne.n	80009d4 <display7SEG+0xb8>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 8000982:	2201      	movs	r2, #1
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	48bc      	ldr	r0, [pc, #752]	; (8000c78 <display7SEG+0x35c>)
 8000988:	f000 ffd1 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	48b9      	ldr	r0, [pc, #740]	; (8000c78 <display7SEG+0x35c>)
 8000994:	f000 ffcb 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	48b6      	ldr	r0, [pc, #728]	; (8000c78 <display7SEG+0x35c>)
 80009a0:	f000 ffc5 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	48b3      	ldr	r0, [pc, #716]	; (8000c78 <display7SEG+0x35c>)
 80009ac:	f000 ffbf 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	48b0      	ldr	r0, [pc, #704]	; (8000c78 <display7SEG+0x35c>)
 80009b8:	f000 ffb9 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	48ad      	ldr	r0, [pc, #692]	; (8000c78 <display7SEG+0x35c>)
 80009c4:	f000 ffb3 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	48aa      	ldr	r0, [pc, #680]	; (8000c78 <display7SEG+0x35c>)
 80009d0:	f000 ffad 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 2){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d128      	bne.n	8000a2c <display7SEG+0x110>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	48a6      	ldr	r0, [pc, #664]	; (8000c78 <display7SEG+0x35c>)
 80009e0:	f000 ffa5 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	48a3      	ldr	r0, [pc, #652]	; (8000c78 <display7SEG+0x35c>)
 80009ec:	f000 ff9f 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f6:	48a0      	ldr	r0, [pc, #640]	; (8000c78 <display7SEG+0x35c>)
 80009f8:	f000 ff99 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	489d      	ldr	r0, [pc, #628]	; (8000c78 <display7SEG+0x35c>)
 8000a04:	f000 ff93 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0e:	489a      	ldr	r0, [pc, #616]	; (8000c78 <display7SEG+0x35c>)
 8000a10:	f000 ff8d 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	4897      	ldr	r0, [pc, #604]	; (8000c78 <display7SEG+0x35c>)
 8000a1c:	f000 ff87 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4894      	ldr	r0, [pc, #592]	; (8000c78 <display7SEG+0x35c>)
 8000a28:	f000 ff81 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d128      	bne.n	8000a84 <display7SEG+0x168>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	4890      	ldr	r0, [pc, #576]	; (8000c78 <display7SEG+0x35c>)
 8000a38:	f000 ff79 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	488d      	ldr	r0, [pc, #564]	; (8000c78 <display7SEG+0x35c>)
 8000a44:	f000 ff73 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	488a      	ldr	r0, [pc, #552]	; (8000c78 <display7SEG+0x35c>)
 8000a50:	f000 ff6d 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4887      	ldr	r0, [pc, #540]	; (8000c78 <display7SEG+0x35c>)
 8000a5c:	f000 ff67 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	4884      	ldr	r0, [pc, #528]	; (8000c78 <display7SEG+0x35c>)
 8000a68:	f000 ff61 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a72:	4881      	ldr	r0, [pc, #516]	; (8000c78 <display7SEG+0x35c>)
 8000a74:	f000 ff5b 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	487e      	ldr	r0, [pc, #504]	; (8000c78 <display7SEG+0x35c>)
 8000a80:	f000 ff55 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d128      	bne.n	8000adc <display7SEG+0x1c0>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	487a      	ldr	r0, [pc, #488]	; (8000c78 <display7SEG+0x35c>)
 8000a90:	f000 ff4d 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9a:	4877      	ldr	r0, [pc, #476]	; (8000c78 <display7SEG+0x35c>)
 8000a9c:	f000 ff47 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa6:	4874      	ldr	r0, [pc, #464]	; (8000c78 <display7SEG+0x35c>)
 8000aa8:	f000 ff41 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	4871      	ldr	r0, [pc, #452]	; (8000c78 <display7SEG+0x35c>)
 8000ab4:	f000 ff3b 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	486e      	ldr	r0, [pc, #440]	; (8000c78 <display7SEG+0x35c>)
 8000ac0:	f000 ff35 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	486b      	ldr	r0, [pc, #428]	; (8000c78 <display7SEG+0x35c>)
 8000acc:	f000 ff2f 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	4868      	ldr	r0, [pc, #416]	; (8000c78 <display7SEG+0x35c>)
 8000ad8:	f000 ff29 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 5){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b05      	cmp	r3, #5
 8000ae0:	d128      	bne.n	8000b34 <display7SEG+0x218>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4864      	ldr	r0, [pc, #400]	; (8000c78 <display7SEG+0x35c>)
 8000ae8:	f000 ff21 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	4861      	ldr	r0, [pc, #388]	; (8000c78 <display7SEG+0x35c>)
 8000af4:	f000 ff1b 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	485e      	ldr	r0, [pc, #376]	; (8000c78 <display7SEG+0x35c>)
 8000b00:	f000 ff15 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	485b      	ldr	r0, [pc, #364]	; (8000c78 <display7SEG+0x35c>)
 8000b0c:	f000 ff0f 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	4858      	ldr	r0, [pc, #352]	; (8000c78 <display7SEG+0x35c>)
 8000b18:	f000 ff09 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	4855      	ldr	r0, [pc, #340]	; (8000c78 <display7SEG+0x35c>)
 8000b24:	f000 ff03 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4852      	ldr	r0, [pc, #328]	; (8000c78 <display7SEG+0x35c>)
 8000b30:	f000 fefd 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 6){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d128      	bne.n	8000b8c <display7SEG+0x270>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	484e      	ldr	r0, [pc, #312]	; (8000c78 <display7SEG+0x35c>)
 8000b40:	f000 fef5 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	484b      	ldr	r0, [pc, #300]	; (8000c78 <display7SEG+0x35c>)
 8000b4c:	f000 feef 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	4848      	ldr	r0, [pc, #288]	; (8000c78 <display7SEG+0x35c>)
 8000b58:	f000 fee9 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	4845      	ldr	r0, [pc, #276]	; (8000c78 <display7SEG+0x35c>)
 8000b64:	f000 fee3 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6e:	4842      	ldr	r0, [pc, #264]	; (8000c78 <display7SEG+0x35c>)
 8000b70:	f000 fedd 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	483f      	ldr	r0, [pc, #252]	; (8000c78 <display7SEG+0x35c>)
 8000b7c:	f000 fed7 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	483c      	ldr	r0, [pc, #240]	; (8000c78 <display7SEG+0x35c>)
 8000b88:	f000 fed1 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d128      	bne.n	8000be4 <display7SEG+0x2c8>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	4838      	ldr	r0, [pc, #224]	; (8000c78 <display7SEG+0x35c>)
 8000b98:	f000 fec9 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <display7SEG+0x35c>)
 8000ba4:	f000 fec3 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4832      	ldr	r0, [pc, #200]	; (8000c78 <display7SEG+0x35c>)
 8000bb0:	f000 febd 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	482f      	ldr	r0, [pc, #188]	; (8000c78 <display7SEG+0x35c>)
 8000bbc:	f000 feb7 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc6:	482c      	ldr	r0, [pc, #176]	; (8000c78 <display7SEG+0x35c>)
 8000bc8:	f000 feb1 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	4829      	ldr	r0, [pc, #164]	; (8000c78 <display7SEG+0x35c>)
 8000bd4:	f000 feab 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <display7SEG+0x35c>)
 8000be0:	f000 fea5 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d128      	bne.n	8000c3c <display7SEG+0x320>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4822      	ldr	r0, [pc, #136]	; (8000c78 <display7SEG+0x35c>)
 8000bf0:	f000 fe9d 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	481f      	ldr	r0, [pc, #124]	; (8000c78 <display7SEG+0x35c>)
 8000bfc:	f000 fe97 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <display7SEG+0x35c>)
 8000c08:	f000 fe91 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <display7SEG+0x35c>)
 8000c14:	f000 fe8b 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4816      	ldr	r0, [pc, #88]	; (8000c78 <display7SEG+0x35c>)
 8000c20:	f000 fe85 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <display7SEG+0x35c>)
 8000c2c:	f000 fe7f 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <display7SEG+0x35c>)
 8000c38:	f000 fe79 	bl	800192e <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b09      	cmp	r3, #9
 8000c40:	d12b      	bne.n	8000c9a <display7SEG+0x37e>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <display7SEG+0x35c>)
 8000c48:	f000 fe71 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <display7SEG+0x35c>)
 8000c54:	f000 fe6b 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <display7SEG+0x35c>)
 8000c60:	f000 fe65 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <display7SEG+0x35c>)
 8000c6c:	f000 fe5f 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c76:	e001      	b.n	8000c7c <display7SEG+0x360>
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <display7SEG+0x388>)
 8000c7e:	f000 fe56 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <display7SEG+0x388>)
 8000c8a:	f000 fe50 	bl	800192e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <display7SEG+0x388>)
 8000c96:	f000 fe4a 	bl	800192e <HAL_GPIO_WritePin>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <update7SEG>:

int valueSEG12;
int valueSEG34;
void update7SEG(int index) { //Quét led
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//Reset led
    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4839      	ldr	r0, [pc, #228]	; (8000d9c <update7SEG+0xf4>)
 8000cb6:	f000 fe3a 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4837      	ldr	r0, [pc, #220]	; (8000d9c <update7SEG+0xf4>)
 8000cc0:	f000 fe35 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4834      	ldr	r0, [pc, #208]	; (8000d9c <update7SEG+0xf4>)
 8000cca:	f000 fe30 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4832      	ldr	r0, [pc, #200]	; (8000d9c <update7SEG+0xf4>)
 8000cd4:	f000 fe2b 	bl	800192e <HAL_GPIO_WritePin>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d858      	bhi.n	8000d90 <update7SEG+0xe8>
 8000cde:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <update7SEG+0x3c>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000cf5 	.word	0x08000cf5
 8000ce8:	08000d17 	.word	0x08000d17
 8000cec:	08000d43 	.word	0x08000d43
 8000cf0:	08000d65 	.word	0x08000d65

    switch(index) {
        case 0:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4828      	ldr	r0, [pc, #160]	; (8000d9c <update7SEG+0xf4>)
 8000cfa:	f000 fe18 	bl	800192e <HAL_GPIO_WritePin>
            display7SEG(valueSEG12 / 10);
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <update7SEG+0xf8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <update7SEG+0xfc>)
 8000d04:	fb82 1203 	smull	r1, r2, r2, r3
 8000d08:	1092      	asrs	r2, r2, #2
 8000d0a:	17db      	asrs	r3, r3, #31
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe04 	bl	800091c <display7SEG>
            break;
 8000d14:	e03d      	b.n	8000d92 <update7SEG+0xea>
        case 1:
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4820      	ldr	r0, [pc, #128]	; (8000d9c <update7SEG+0xf4>)
 8000d1c:	f000 fe07 	bl	800192e <HAL_GPIO_WritePin>
            display7SEG(valueSEG12 % 10);
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <update7SEG+0xf8>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <update7SEG+0xfc>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac9      	subs	r1, r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad1      	subs	r1, r2, r3
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	f7ff fdee 	bl	800091c <display7SEG>
            break;
 8000d40:	e027      	b.n	8000d92 <update7SEG+0xea>
        case 2:
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2104      	movs	r1, #4
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <update7SEG+0xf4>)
 8000d48:	f000 fdf1 	bl	800192e <HAL_GPIO_WritePin>
            display7SEG(valueSEG34 / 10);
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <update7SEG+0x100>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <update7SEG+0xfc>)
 8000d52:	fb82 1203 	smull	r1, r2, r2, r3
 8000d56:	1092      	asrs	r2, r2, #2
 8000d58:	17db      	asrs	r3, r3, #31
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fddd 	bl	800091c <display7SEG>
            break;
 8000d62:	e016      	b.n	8000d92 <update7SEG+0xea>
        case 3:
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <update7SEG+0xf4>)
 8000d6a:	f000 fde0 	bl	800192e <HAL_GPIO_WritePin>
            display7SEG(valueSEG34 % 10);
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <update7SEG+0x100>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <update7SEG+0xfc>)
 8000d74:	fb83 1302 	smull	r1, r3, r3, r2
 8000d78:	1099      	asrs	r1, r3, #2
 8000d7a:	17d3      	asrs	r3, r2, #31
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	440b      	add	r3, r1
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	1ad1      	subs	r1, r2, r3
 8000d88:	4608      	mov	r0, r1
 8000d8a:	f7ff fdc7 	bl	800091c <display7SEG>
            break;
 8000d8e:	e000      	b.n	8000d92 <update7SEG+0xea>
        default:
            break;
 8000d90:	bf00      	nop
    }
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	200000c0 	.word	0x200000c0
 8000da4:	66666667 	.word	0x66666667
 8000da8:	200000bc 	.word	0x200000bc

08000dac <led_on>:


//bật tắt đèn giao thông
void led_on(int pin){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 0);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <led_on+0x20>)
 8000dbe:	f000 fdb6 	bl	800192e <HAL_GPIO_WritePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <led_off>:

void led_off(int pin){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 1);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <led_off+0x20>)
 8000de2:	f000 fda4 	bl	800192e <HAL_GPIO_WritePin>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40010800 	.word	0x40010800

08000df4 <blink_red>:

//nhấp nháy đèn khi vào chế độ chỉnh thời gian
void blink_red(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED0_GPIO_Port , RED0_Pin);
 8000df8:	2108      	movs	r1, #8
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <blink_red+0x18>)
 8000dfc:	f000 fdaf 	bl	800195e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED1_GPIO_Port , RED1_Pin);
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	4802      	ldr	r0, [pc, #8]	; (8000e0c <blink_red+0x18>)
 8000e04:	f000 fdab 	bl	800195e <HAL_GPIO_TogglePin>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010800 	.word	0x40010800

08000e10 <blink_amber>:

void blink_amber(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(AMBER0_GPIO_Port , AMBER0_Pin);
 8000e14:	2104      	movs	r1, #4
 8000e16:	4804      	ldr	r0, [pc, #16]	; (8000e28 <blink_amber+0x18>)
 8000e18:	f000 fda1 	bl	800195e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(AMBER1_GPIO_Port , AMBER1_Pin);
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <blink_amber+0x18>)
 8000e20:	f000 fd9d 	bl	800195e <HAL_GPIO_TogglePin>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40010800 	.word	0x40010800

08000e2c <blink_green>:

void blink_green(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN0_GPIO_Port , GREEN0_Pin);
 8000e30:	2102      	movs	r1, #2
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <blink_green+0x18>)
 8000e34:	f000 fd93 	bl	800195e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port , GREEN1_Pin);
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <blink_green+0x18>)
 8000e3c:	f000 fd8f 	bl	800195e <HAL_GPIO_TogglePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40010800 	.word	0x40010800

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fa6e 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f81a 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e54:	f000 f854 	bl	8000f00 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000e58:	f000 f89e 	bl	8000f98 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <main+0x3c>)
 8000e5e:	f001 f9c3 	bl	80021e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialButton();
 8000e62:	f7ff f973 	bl	800014c <initialButton>
  setTimer1(500); //Thời gian quét led và chớp tắt led giao thông
 8000e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6a:	f000 f909 	bl	8001080 <setTimer1>
  setTimer2(1000); //Thời gian để cập nhật giá trị led
 8000e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e72:	f000 f921 	bl	80010b8 <setTimer2>
  setTimer3(10); //Thời gian xử lý debouce
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 f93a 	bl	80010f0 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_processing();
 8000e7c:	f7ff fa8e 	bl	800039c <fsm_processing>
 8000e80:	e7fc      	b.n	8000e7c <main+0x34>
 8000e82:	bf00      	nop
 8000e84:	200000c4 	.word	0x200000c4

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	; 0x40
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fd56 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fd66 	bl	8001990 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eca:	f000 f8d3 	bl	8001074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ffd2 	bl	8001e90 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ef2:	f000 f8bf 	bl	8001074 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f34:	2209      	movs	r2, #9
 8000f36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f46:	f001 f8ff 	bl	8002148 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f50:	f000 f890 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f62:	f001 fa7d 	bl	8002460 <HAL_TIM_ConfigClockSource>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 f882 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f7e:	f001 fc55 	bl	800282c <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f88:	f000 f874 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200000c4 	.word	0x200000c4

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_GPIO_Init+0xb4>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN0_Pin|AMBER0_Pin|RED0_Pin|GREEN1_Pin
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fe4:	f000 fca3 	bl	800192e <HAL_GPIO_WritePin>
                          |AMBER1_Pin|RED1_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	210f      	movs	r1, #15
 8000fec:	4819      	ldr	r0, [pc, #100]	; (8001054 <MX_GPIO_Init+0xbc>)
 8000fee:	f000 fc9e 	bl	800192e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN0_Pin AMBER0_Pin RED0_Pin GREEN1_Pin
                           AMBER1_Pin RED1_Pin a_Pin b_Pin
                           c_Pin d_Pin e_Pin f_Pin
                           g_Pin */
  GPIO_InitStruct.Pin = GREEN0_Pin|AMBER0_Pin|RED0_Pin|GREEN1_Pin
 8000ff2:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000ff6:	60bb      	str	r3, [r7, #8]
                          |AMBER1_Pin|RED1_Pin|a_Pin|b_Pin
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_GPIO_Init+0xb8>)
 800100c:	f000 fafe 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8001010:	230f      	movs	r3, #15
 8001012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001028:	f000 faf0 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : Select_Pin Duration_Pin Set_Pin */
  GPIO_InitStruct.Pin = Select_Pin|Duration_Pin|Set_Pin;
 800102c:	2370      	movs	r3, #112	; 0x70
 800102e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001034:	2301      	movs	r3, #1
 8001036:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001040:	f000 fae4 	bl	800160c <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800
 8001054:	40010c00 	.word	0x40010c00

08001058 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	timer1Run();
 8001060:	f000 f862 	bl	8001128 <timer1Run>
	timer2Run();
 8001064:	f000 f87a 	bl	800115c <timer2Run>
	timer3Run();
 8001068:	f000 f892 	bl	8001190 <timer3Run>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	e7fe      	b.n	800107c <Error_Handler+0x8>
	...

08001080 <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <setTimer1+0x2c>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1092      	asrs	r2, r2, #2
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <setTimer1+0x30>)
 8001098:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <setTimer1+0x34>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	66666667 	.word	0x66666667
 80010b0:	2000005c 	.word	0x2000005c
 80010b4:	20000060 	.word	0x20000060

080010b8 <setTimer2>:

void setTimer2(int duration)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <setTimer2+0x2c>)
 80010c4:	fb82 1203 	smull	r1, r2, r2, r3
 80010c8:	1092      	asrs	r2, r2, #2
 80010ca:	17db      	asrs	r3, r3, #31
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <setTimer2+0x30>)
 80010d0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <setTimer2+0x34>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	66666667 	.word	0x66666667
 80010e8:	20000064 	.word	0x20000064
 80010ec:	20000068 	.word	0x20000068

080010f0 <setTimer3>:

void setTimer3(int duration)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <setTimer3+0x2c>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1092      	asrs	r2, r2, #2
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <setTimer3+0x30>)
 8001108:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <setTimer3+0x34>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	66666667 	.word	0x66666667
 8001120:	2000006c 	.word	0x2000006c
 8001124:	20000070 	.word	0x20000070

08001128 <timer1Run>:

void timer1Run()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <timer1Run+0x2c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd0b      	ble.n	800114c <timer1Run+0x24>
	{
		timer1_counter--;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <timer1Run+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <timer1Run+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <timer1Run+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dc02      	bgt.n	800114c <timer1Run+0x24>
		{
			timer1_flag = 1;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <timer1Run+0x30>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
		}

	}
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	2000005c 	.word	0x2000005c
 8001158:	20000060 	.word	0x20000060

0800115c <timer2Run>:

void timer2Run()
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	if (timer2_counter > 0)
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <timer2Run+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd0b      	ble.n	8001180 <timer2Run+0x24>
	{
		timer2_counter--;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <timer2Run+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a06      	ldr	r2, [pc, #24]	; (8001188 <timer2Run+0x2c>)
 8001170:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <timer2Run+0x2c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	dc02      	bgt.n	8001180 <timer2Run+0x24>
		{
			timer2_flag = 1;
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <timer2Run+0x30>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000064 	.word	0x20000064
 800118c:	20000068 	.word	0x20000068

08001190 <timer3Run>:

void timer3Run()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	if (timer3_counter > 0)
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <timer3Run+0x2c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0b      	ble.n	80011b4 <timer3Run+0x24>
	{
		timer3_counter--;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <timer3Run+0x2c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <timer3Run+0x2c>)
 80011a4:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <timer3Run+0x2c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dc02      	bgt.n	80011b4 <timer3Run+0x24>
		{
			timer3_flag = 1;
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <timer3Run+0x30>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		}

	}
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	2000006c 	.word	0x2000006c
 80011c0:	20000070 	.word	0x20000070

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_MspInit+0x5c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_MspInit+0x5c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_MspInit+0x5c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_MspInit+0x5c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_MspInit+0x60>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_MspInit+0x60>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 f9a1 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 f9ba 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 f87f 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f000 ffdb 	bl	8002280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000c4 	.word	0x200000c4

080012d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <Reset_Handler>:
 80012e0:	f7ff fff8 	bl	80012d4 <SystemInit>
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <LoopFillZerobss+0xe>)
 80012e6:	490c      	ldr	r1, [pc, #48]	; (8001318 <LoopFillZerobss+0x12>)
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <LoopFillZerobss+0x16>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:
 80012ee:	58d4      	ldr	r4, [r2, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:
 80012f4:	18c4      	adds	r4, r0, r3
 80012f6:	428c      	cmp	r4, r1
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <LoopFillZerobss+0x1a>)
 80012fc:	4c09      	ldr	r4, [pc, #36]	; (8001324 <LoopFillZerobss+0x1e>)
 80012fe:	2300      	movs	r3, #0
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:
 8001306:	42a2      	cmp	r2, r4
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>
 800130a:	f001 faf9 	bl	8002900 <__libc_init_array>
 800130e:	f7ff fd9b 	bl	8000e48 <main>
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000
 8001318:	2000001c 	.word	0x2000001c
 800131c:	0800299c 	.word	0x0800299c
 8001320:	2000001c 	.word	0x2000001c
 8001324:	20000110 	.word	0x20000110

08001328 <ADC1_2_IRQHandler>:
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x28>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x28>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f923 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff ff3c 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f93b 	bl	80015f2 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f903 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000018 	.word	0x20000018
 80013b4:	20000014 	.word	0x20000014

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000018 	.word	0x20000018
 80013d8:	2000010c 	.word	0x2000010c

080013dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	2000010c 	.word	0x2000010c

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <__NVIC_EnableIRQ+0x34>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff2d 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff42 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff35 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b08b      	sub	sp, #44	; 0x2c
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161e:	e148      	b.n	80018b2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001620:	2201      	movs	r2, #1
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 8137 	bne.w	80018ac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4aa3      	ldr	r2, [pc, #652]	; (80018d0 <HAL_GPIO_Init+0x2c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d05e      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001648:	4aa1      	ldr	r2, [pc, #644]	; (80018d0 <HAL_GPIO_Init+0x2c4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d875      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800164e:	4aa1      	ldr	r2, [pc, #644]	; (80018d4 <HAL_GPIO_Init+0x2c8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d058      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001654:	4a9f      	ldr	r2, [pc, #636]	; (80018d4 <HAL_GPIO_Init+0x2c8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d86f      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800165a:	4a9f      	ldr	r2, [pc, #636]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d052      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001660:	4a9d      	ldr	r2, [pc, #628]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d869      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001666:	4a9d      	ldr	r2, [pc, #628]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04c      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 800166c:	4a9b      	ldr	r2, [pc, #620]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d863      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001672:	4a9b      	ldr	r2, [pc, #620]	; (80018e0 <HAL_GPIO_Init+0x2d4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d046      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001678:	4a99      	ldr	r2, [pc, #612]	; (80018e0 <HAL_GPIO_Init+0x2d4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d85d      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800167e:	2b12      	cmp	r3, #18
 8001680:	d82a      	bhi.n	80016d8 <HAL_GPIO_Init+0xcc>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d859      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_GPIO_Init+0x80>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	08001707 	.word	0x08001707
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016f3 	.word	0x080016f3
 8001698:	08001735 	.word	0x08001735
 800169c:	0800173b 	.word	0x0800173b
 80016a0:	0800173b 	.word	0x0800173b
 80016a4:	0800173b 	.word	0x0800173b
 80016a8:	0800173b 	.word	0x0800173b
 80016ac:	0800173b 	.word	0x0800173b
 80016b0:	0800173b 	.word	0x0800173b
 80016b4:	0800173b 	.word	0x0800173b
 80016b8:	0800173b 	.word	0x0800173b
 80016bc:	0800173b 	.word	0x0800173b
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	0800173b 	.word	0x0800173b
 80016c8:	0800173b 	.word	0x0800173b
 80016cc:	0800173b 	.word	0x0800173b
 80016d0:	080016e9 	.word	0x080016e9
 80016d4:	080016fd 	.word	0x080016fd
 80016d8:	4a82      	ldr	r2, [pc, #520]	; (80018e4 <HAL_GPIO_Init+0x2d8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016de:	e02c      	b.n	800173a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e029      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	3304      	adds	r3, #4
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e024      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	3308      	adds	r3, #8
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e01f      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	330c      	adds	r3, #12
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e01a      	b.n	800173c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170e:	2304      	movs	r3, #4
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e013      	b.n	800173c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800171c:	2308      	movs	r3, #8
 800171e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	611a      	str	r2, [r3, #16]
          break;
 8001726:	e009      	b.n	800173c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001728:	2308      	movs	r3, #8
 800172a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	615a      	str	r2, [r3, #20]
          break;
 8001732:	e003      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x130>
          break;
 800173a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d801      	bhi.n	8001746 <HAL_GPIO_Init+0x13a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	e001      	b.n	800174a <HAL_GPIO_Init+0x13e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3304      	adds	r3, #4
 800174a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	d802      	bhi.n	8001758 <HAL_GPIO_Init+0x14c>
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x152>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	3b08      	subs	r3, #8
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	210f      	movs	r1, #15
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	6a39      	ldr	r1, [r7, #32]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8090 	beq.w	80018ac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a55      	ldr	r2, [pc, #340]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_GPIO_Init+0x2dc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <HAL_GPIO_Init+0x2e4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1e0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x2e8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_GPIO_Init+0x2ec>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017ec:	2300      	movs	r3, #0
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017fe:	493b      	ldr	r1, [pc, #236]	; (80018ec <HAL_GPIO_Init+0x2e0>)
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	4933      	ldr	r1, [pc, #204]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001830:	4013      	ands	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	492d      	ldr	r1, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	4929      	ldr	r1, [pc, #164]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001858:	4013      	ands	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4923      	ldr	r1, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	491f      	ldr	r1, [pc, #124]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001880:	4013      	ands	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4919      	ldr	r1, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4915      	ldr	r1, [pc, #84]	; (80018fc <HAL_GPIO_Init+0x2f0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3301      	adds	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f aeaf 	bne.w	8001620 <HAL_GPIO_Init+0x14>
  }
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	372c      	adds	r7, #44	; 0x2c
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	807b      	strh	r3, [r7, #2]
 800193a:	4613      	mov	r3, r2
 800193c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193e:	787b      	ldrb	r3, [r7, #1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194a:	e003      	b.n	8001954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	041a      	lsls	r2, r3, #16
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43d9      	mvns	r1, r3
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	400b      	ands	r3, r1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e26c      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8087 	beq.w	8001abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b0:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d00c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019bc:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d112      	bne.n	80019ee <HAL_RCC_OscConfig+0x5e>
 80019c8:	4b8c      	ldr	r3, [pc, #560]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d10b      	bne.n	80019ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d6:	4b89      	ldr	r3, [pc, #548]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d06c      	beq.n	8001abc <HAL_RCC_OscConfig+0x12c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d168      	bne.n	8001abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e246      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x76>
 80019f8:	4b80      	ldr	r3, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7f      	ldr	r2, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e02e      	b.n	8001a64 <HAL_RCC_OscConfig+0xd4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x98>
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7a      	ldr	r2, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a77      	ldr	r2, [pc, #476]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xd4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0xbc>
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a71      	ldr	r2, [pc, #452]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xd4>
 8001a4c:	4b6b      	ldr	r3, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a6a      	ldr	r2, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fcb6 	bl	80013dc <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fcb2 	bl	80013dc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1fa      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe4>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fca2 	bl	80013dc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc9e 	bl	80013dc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1e6      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x10c>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad6:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x18c>
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x176>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1ba      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4939      	ldr	r1, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_RCC_OscConfig+0x270>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fc57 	bl	80013dc <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fc53 	bl	80013dc <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e19b      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4927      	ldr	r1, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_RCC_OscConfig+0x270>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc36 	bl	80013dc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc32 	bl	80013dc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e17a      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03a      	beq.n	8001c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d019      	beq.n	8001bda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fc16 	bl	80013dc <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc12 	bl	80013dc <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e15a      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 fa9a 	bl	800210c <RCC_Delay>
 8001bd8:	e01c      	b.n	8001c14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fbfc 	bl	80013dc <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be6:	e00f      	b.n	8001c08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fbf8 	bl	80013dc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d908      	bls.n	8001c08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e140      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	42420000 	.word	0x42420000
 8001c04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b9e      	ldr	r3, [pc, #632]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e9      	bne.n	8001be8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a6 	beq.w	8001d6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b97      	ldr	r3, [pc, #604]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10d      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a93      	ldr	r2, [pc, #588]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b91      	ldr	r3, [pc, #580]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b8e      	ldr	r3, [pc, #568]	; (8001e88 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d118      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fbb9 	bl	80013dc <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff fbb5 	bl	80013dc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0fd      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x312>
 8001c94:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	e02d      	b.n	8001cfe <HAL_RCC_OscConfig+0x36e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x334>
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	e01c      	b.n	8001cfe <HAL_RCC_OscConfig+0x36e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x356>
 8001ccc:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a6c      	ldr	r2, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e00b      	b.n	8001cfe <HAL_RCC_OscConfig+0x36e>
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a66      	ldr	r2, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	4b64      	ldr	r3, [pc, #400]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d015      	beq.n	8001d32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fb69 	bl	80013dc <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fb65 	bl	80013dc <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e0ab      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ee      	beq.n	8001d0e <HAL_RCC_OscConfig+0x37e>
 8001d30:	e014      	b.n	8001d5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fb53 	bl	80013dc <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fb4f 	bl	80013dc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e095      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ee      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8081 	beq.w	8001e7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d061      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d146      	bne.n	8001e1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_OscConfig+0x4fc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fb23 	bl	80013dc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff fb1f 	bl	80013dc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e067      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d108      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a19      	ldr	r1, [r3, #32]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	430b      	orrs	r3, r1
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x4fc>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff faf3 	bl	80013dc <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff faef 	bl	80013dc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e037      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46a>
 8001e18:	e02f      	b.n	8001e7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x4fc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fadc 	bl	80013dc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fad8 	bl	80013dc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e020      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x498>
 8001e46:	e018      	b.n	8001e7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42420060 	.word	0x42420060

08001e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d0      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d910      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4965      	ldr	r1, [pc, #404]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0b8      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	494d      	ldr	r1, [pc, #308]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d040      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e07f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e073      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06b      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4936      	ldr	r1, [pc, #216]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff fa2c 	bl	80013dc <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff fa28 	bl	80013dc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e053      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d210      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4922      	ldr	r1, [pc, #136]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e032      	b.n	8002046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4916      	ldr	r1, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	490e      	ldr	r1, [pc, #56]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201e:	f000 f821 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	490a      	ldr	r1, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1c8>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1cc>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1d0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f98a 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	08002970 	.word	0x08002970
 800205c:	20000010 	.word	0x20000010
 8002060:	20000014 	.word	0x20000014

08002064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x30>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x36>
 8002092:	e027      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002096:	613b      	str	r3, [r7, #16]
      break;
 8002098:	e027      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0c5b      	lsrs	r3, r3, #17
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	fb02 f203 	mul.w	r2, r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e004      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	613b      	str	r3, [r7, #16]
      break;
 80020e2:	e002      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetSysClockFreq+0x98>)
 80020e6:	613b      	str	r3, [r7, #16]
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	693b      	ldr	r3, [r7, #16]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	08002980 	.word	0x08002980
 8002104:	08002990 	.word	0x08002990
 8002108:	003d0900 	.word	0x003d0900

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000010 	.word	0x20000010
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e041      	b.n	80021de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff f85a 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 fa56 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e035      	b.n	800226c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a16      	ldr	r2, [pc, #88]	; (8002278 <HAL_TIM_Base_Start_IT+0x90>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_TIM_Base_Start_IT+0x4e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d004      	beq.n	8002236 <HAL_TIM_Base_Start_IT+0x4e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_TIM_Base_Start_IT+0x94>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d111      	bne.n	800225a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d010      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002258:	e007      	b.n	800226a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400

08002280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d020      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0202 	mvn.w	r2, #2
 80022b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f998 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f98b 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f99a 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0204 	mvn.w	r2, #4
 8002300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f972 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f965 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f974 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0208 	mvn.w	r2, #8
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f94c 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f93f 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f94e 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0210 	mvn.w	r2, #16
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2208      	movs	r2, #8
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f926 	bl	8002600 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f919 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f928 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0201 	mvn.w	r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fe36 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00c      	beq.n	8002410 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa6f 	bl	80028ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8f8 	bl	8002624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0220 	mvn.w	r2, #32
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa42 	bl	80028dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_TIM_ConfigClockSource+0x1c>
 8002478:	2302      	movs	r3, #2
 800247a:	e0b4      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x186>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b4:	d03e      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0xd4>
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ba:	f200 8087 	bhi.w	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	f000 8086 	beq.w	80025d2 <HAL_TIM_ConfigClockSource+0x172>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	d87f      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b70      	cmp	r3, #112	; 0x70
 80024ce:	d01a      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xa6>
 80024d0:	2b70      	cmp	r3, #112	; 0x70
 80024d2:	d87b      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b60      	cmp	r3, #96	; 0x60
 80024d6:	d050      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x11a>
 80024d8:	2b60      	cmp	r3, #96	; 0x60
 80024da:	d877      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d03c      	beq.n	800255a <HAL_TIM_ConfigClockSource+0xfa>
 80024e0:	2b50      	cmp	r3, #80	; 0x50
 80024e2:	d873      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d058      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x13a>
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d86f      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b30      	cmp	r3, #48	; 0x30
 80024ee:	d064      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b30      	cmp	r3, #48	; 0x30
 80024f2:	d86b      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d060      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d867      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d05c      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	2b10      	cmp	r3, #16
 8002502:	d05a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 8002504:	e062      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f000 f96a 	bl	80027ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	609a      	str	r2, [r3, #8]
      break;
 8002532:	e04f      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f000 f953 	bl	80027ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002556:	609a      	str	r2, [r3, #8]
      break;
 8002558:	e03c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	f000 f8ca 	bl	8002700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2150      	movs	r1, #80	; 0x50
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f921 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002578:	e02c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	f000 f8e8 	bl	800275c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2160      	movs	r1, #96	; 0x60
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f911 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002598:	e01c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 f8aa 	bl	8002700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2140      	movs	r1, #64	; 0x40
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f901 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 80025b8:	e00c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	4610      	mov	r0, r2
 80025c6:	f000 f8f8 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 80025ca:	e003      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e000      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
	...

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <TIM_Base_SetConfig+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <TIM_Base_SetConfig+0x28>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0x28>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <TIM_Base_SetConfig+0xc4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <TIM_Base_SetConfig+0xc0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x52>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x52>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <TIM_Base_SetConfig+0xc4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <TIM_Base_SetConfig+0xc0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f023 0201 	bic.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	611a      	str	r2, [r3, #16]
  }
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400

08002700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 030a 	bic.w	r3, r3, #10
 800273c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0210 	bic.w	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002798:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b087      	sub	sp, #28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4313      	orrs	r3, r2
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	609a      	str	r2, [r3, #8]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002840:	2302      	movs	r3, #2
 8002842:	e041      	b.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d004      	beq.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10c      	bne.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	2600      	movs	r6, #0
 8002904:	4d0c      	ldr	r5, [pc, #48]	; (8002938 <__libc_init_array+0x38>)
 8002906:	4c0d      	ldr	r4, [pc, #52]	; (800293c <__libc_init_array+0x3c>)
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	f000 f822 	bl	8002958 <_init>
 8002914:	2600      	movs	r6, #0
 8002916:	4d0a      	ldr	r5, [pc, #40]	; (8002940 <__libc_init_array+0x40>)
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <__libc_init_array+0x44>)
 800291a:	1b64      	subs	r4, r4, r5
 800291c:	10a4      	asrs	r4, r4, #2
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	f855 3b04 	ldr.w	r3, [r5], #4
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	08002994 	.word	0x08002994
 800293c:	08002994 	.word	0x08002994
 8002940:	08002994 	.word	0x08002994
 8002944:	08002998 	.word	0x08002998

08002948 <memset>:
 8002948:	4603      	mov	r3, r0
 800294a:	4402      	add	r2, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
